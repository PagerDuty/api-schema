{
  "openapi": "3.0.2",
  "info": {
    "contact": {
      "name": "PagerDuty Support",
      "url": "http://www.pagerduty.com/support",
      "email": "support@pagerduty.com"
    },
    "title": "PagerDuty API",
    "description": "The PagerDuty API provides programmatic access to entities within a  PagerDuty account. It is designed around [RESTful principles](https://en.wikipedia.org/wiki/Representational_state_transfer) with a path structure based on resources and their relationships.\n\n\nAll requests and responses are serialized in [JSON](https://en.wikipedia.org/wiki/JSON), including error responses.\n\n\nSchema are designed to be reusable across requests and across endpoints.\n\n\nMore sophisticated API clients should treat PagerDuty resources as unique objects keyed by the `id` field that can be used in any API request involving resources of that type.\n\n\nEvery resource contains a `type` field that identifies the schema it uses.\n\n\n## Rate limiting\n\n\nEach account and authentication mechanism is limited to the number of API requests it can make every minute. API requests that exceed the API rate limit will return an [HTTP status code](error_codes.html#http_responses) of 429. Different requests may affect your rate limit differently, so clients should always be prepared to be rate limited and respond appropriately.\n\n\n## Read-Only API Keys\n\n\nAPI requests made with read-only keys attempting to access endpoints with methods other than `GET` will return an [HTTP status code](error_codes.html#http_responses) of 403.\n\n\n## Error Codes\n\n\nMost APIs will return an error code from an unsuccessful call. They are described [here](error_codes.html).\n",
    "version": "2.0.0"
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "API Reference",
      "description": "The API reference documentation provides all the nitty-gritty details of the endpoints available in the REST API.\nSee parameters you can specify, request and response schemas, as well as examples for every PagerDuty REST API endpoint.\n\nFind the endpoint you're looking for in the left navigation column.\nThen, consult the description in the middle column to learn about [parameters](#parameters) that can be specified with the request, possible [responses](#response-messages) to the request, and to [try out](#try-it-out-) a request.\nIn the right column, see examples and [schema definitions](#schemas) of what you can expect in a successful response.\nFor `PUT` and `POST` endpoints, examples and [schema definitions](#schemas) are available for request bodies as well.\n\n##### Parameters\n\nSee the names, [types](https://v2.developer.pagerduty.com/docs/types), possible values, and location of every parameter accepted by the endpoint.\n\n**Query parameters** located *in query* should be specified in the query string when making a request.\n**Body parameters** located *in body* should be specified in JSON format within the request body.\nBody parameters are typically only used with `POST` and `PUT` endpoints.\n**Header parameters** located *in header* should be specified as [standard HTTP headers](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields) in the header section of the request.\n\n##### Schemas\n\nSchemas show the name, [type](https://v2.developer.pagerduty.com/docs/types), description, and possible values for every property in each [resource schema](https://v2.developer.pagerduty.com/docs/resource-schemas).\nProperties which are **read only** cannot be set as part of a request and will be generated by the server. Properties which are not **optional** are required, and *must* be specified in requests.\n\n##### Response Messages\n\nSee the possible [HTTP status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) that can be returned by the endpoint if the request did not complete successfully.\nOften, the response body for an unsuccessful request will contain one or more [error messages](https://v2.developer.pagerduty.com/docs/errors) that indicate what was wrong with the request in more detail.\n\n##### Try it out!\n\nTo test an endpoint against the live API, fill out at the endpoint's parameters and click the \"Try\" button.\nYou'll see the details of the request that was made and the response returned from the server.\n\nBy default, all requests will be made against the read-only \"webdemo\" PagerDuty account.\nProvide your own [API token](https://v2.developer.pagerduty.com/docs/authentication#api-token-authentication) in the \"API Token\" field in the left column and your requests will be sent to your account instead.\nRemember this is the **live API** — modify your own account with care.\n\n##### Learn more\n\nTo read about general PagerDuty API topics, including:\n- [Authentication](https://v2.developer.pagerduty.com/v2/docs/authentication)\n- [Versioning](https://v2.developer.pagerduty.com/v2/docs/versioning)\n- [Endpoints](https://v2.developer.pagerduty.com/v2/docs/endpoints)\n- [Types](https://v2.developer.pagerduty.com/v2/docs/types)\n- [Filtering](https://v2.developer.pagerduty.com/v2/docs/filtering)\n- [Sorting](https://v2.developer.pagerduty.com/v2/docs/sorting)\n- [Pagination](https://v2.developer.pagerduty.com/v2/docs/pagination)\n- [Resource Schemas](https://v2.developer.pagerduty.com/v2/docs/resource-schemas)\n- [Resource References](https://v2.developer.pagerduty.com/v2/docs/references)\n- [Includes](https://v2.developer.pagerduty.com/v2/docs/includes)\n- [Errors](https://v2.developer.pagerduty.com/v2/docs/errors)\n\n[consult the REST API Guide](https://v2.developer.pagerduty.com/docs/rest-api).\n"
    },
    {
      "name": "Abilities",
      "description": "This describes your account's abilities by feature name, like `\"teams\"`.\nAn ability may be available to your account based on things like your pricing plan or account state.\n"
    },
    {
      "name": "Add-ons",
      "description": "Third-party developers can write their own add-ons to PagerDuty's UI, to add HTML to the product.\nGiven a configuration containing a `src` parameter, that URL will be embedded in an `iframe` on a page that's available to users from a drop-down menu.\n"
    },
    {
      "name": "Business Services",
      "description": "Business services allow you to model capabilities that span multiple technical services and that may be owned by several different teams.  Mapping technical services to business services gives responders context on an incident’s impact to the business.\n[*Read more about business services in the PagerDuty Knowledge Base*](https://support.pagerduty.com/docs/business-services).\n"
    },
    {
      "name": "Contextual Search",
      "description": "API to manage, assign, and list Tags. A tag can be assigned to Escalation Policy, Team or User, and searches for those objects can be filtered to retrieve those with specific tags.\n"
    },
    {
      "name": "Escalation Policies",
      "description": "Escalation policies make sure the right people are alerted at the right time.\n\n\nAn escalation policy determines what [user](#resource_Users) or [schedule](#resource_Schedules) will be [notified](#resource_Notifications) first, second, and so on when an [incident](#resource_Incidents) is triggered.\nEscalation policies are used by one or more [services](#resource_Services).\n\n\n#### Escalation Rules\n\n\nAn escalation policy is made up of multiple [escalation rules](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules).\nEach escalation rule represents a level of [on-call](#resource_On-Calls) duty.\nIt specifies one or more [users](#resource_Users) or [schedules](#resource_Schedules) to be notified when an unacknowledged [incident](#resource_Incidents) reaches that [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules).\n\n\nThe first [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules) in the escalation policy is the [user](#resource_Users) that will be [notified](#resource_Notifications) first about the triggered [incident](#resource_Incidents).\n\n\nIf no [on-call](#resource_On-Calls) [user](#resource_Users) for a given [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules) has not acknowledged an [incident](#resource_Incidents) before the [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules)'s escalation delay has elapsed, the [incident](#resource_Incidents) escalates to the next [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules).\n\n\n[*Read more about escalation policies in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/articles/202828950-What-is-an-Escalation-Policy-).\n"
    },
    {
      "name": "Extension Schemas",
      "description": "A PagerDuty extension vendor represents a specific type of outbound extension. Generic Webhook, Slack, Hipchat, etc are all examples of vendors\nthat can be integrated in PagerDuty by making an [Extension](#!/Extensions/get_extensions).\n\n\nExtension Schemas will contain template configuration information that is required to instantiate an instance of the Extension Schema (an Extension) properly.\nIf an extension vendor already has a preconfigured url, the extension will not have to configure one.\nIn addition, if the extension vendor has a config object, the extension will need to provide config values based on what the extension vendor indicates are required for the config.\n\n\nSome Extension Schemas that require OAuth Authorization to be setup, such as the Slack and HipChat extension, cannot be configured through the API.\n"
    },
    {
      "name": "Extensions",
      "description": "A PagerDuty Extension represents an instance of an [Extension Schema](#!/Extension_Vendors/get_extension_schemas) on a object that an Extension can be attached to, such as a Service.\n\n\nAn example of an Extension would be a Generic Webhook endpoint, a specific Slack or Hipchat channel, or a Status Page Webhook.\n"
    },
    {
      "name": "Incidents",
      "description": "An incident is a normalized, de-duplicated event generated by a PagerDuty [integration](#!/Services/get_services_id_integrations_integration_id).\nIt can be thought of as a problem or an issue within your [service](#resource_Services) that needs to be addressed and resolved.\n\n\nIncidents can be `triggered`, `acknowledged`, or `resolved`, and are assigned to a user based on the [service](#resource_Services)'s [escalation policy](#resource_Escalation_Policies).\n\n\nA triggered incident prompts a [notification](#resource_Notifications) to be sent to the currently [on-call](#resource_On-Calls) [user(s)](#resource_Users) as defined in the escalation policy used by the [service](#resource_Services).\nIncidents are triggered through the [Events API](https://v2.developer.pagerduty.com/docs/events-api).\n\n\nUpdates to an incident generate [log entries](#resource_Log_Entries) that capture the changes to an incident over time, whether these changes were prompted by a [user](#resource_Users), an [integration](#resource_Integrations), or were performed automatically.\n\n\n[*Read more about incidents in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/articles/202829250-What-Is-an-Incident-).\n"
    },
    {
      "name": "Log Entries",
      "description": "PagerDuty keeps a log of all the events that happen to an [incident](#resource_Incidents).\nThese are exposed as log entries.\nLog entries give you more insight into how your [team](#resource_Teams) or organization is handling your [incidents](#resource_Incidents).\n\n\nLog entry data includes details about the event(s) that affected the [incident](#resource_Incidents) throughout its lifecycle, such as:\n- the data contained in events sent by the [integration](#!/Services/get_services_id_integrations_integration_id)\n- what [users](#resource_Users) were [notified](#resource_Notifications) and when\n- how they were [notified](#resource_Notifications)\n- what [user(s)](#resource_Users) acknowledged or resolved the [incident](#resource_Incidents)\n- any automatic actions that occurred to the [incident](#resource_Incidents)\n- other manual [user](#resource_Users) actions, such as a reassignment or a note\n\n\nLog entries cannot be created directly through the API; they are a result of other actions. The API provides read-only access to the log entries generated by PagerDuty.\n"
    },
    {
      "name": "Maintenance Windows",
      "description": "A maintenance window is used to temporarily disable one or more [services](#resource_Services) for a set period of time.\nNo [incidents](#resource_Incidents) will be triggered and no [notifications](#resource_Notifications) will be received while a [service](#resource_Services) is disabled by a maintenance window.\n\n\nMaintenance windows are specified to start at a certain time and end after they have begun.\nOnce started, a maintenance window cannot be deleted; it can only be ended immediately to re-enable the [service](#resource_Services).\n\n\n[*Read more about maintenance windows in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/articles/202830350-Putting-a-service-in-maintenance-mode).\n"
    },
    {
      "name": "Notifications",
      "description": "When an [incident](#resource_Incidents) is triggered or escalated, it creates a notification.\n\n\nNotifications are messages containing the details of the [incident](#resource_Incidents), and can be sent through SMS, email, phone calls, and push notifications.\n\n\nNotifications cannot be created directly through the API; they are a result of other actions.\nThe API provides read-only access to the notifications generated by PagerDuty.\n\n\n[*Read more about notifications in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/articles/202828840-What-is-an-Alert-Notification-).\n"
    },
    {
      "name": "On-Calls",
      "description": "An on-call represents a contiguous unit of time for which a [user](#resource_Users) will be on call for a given [escalation policy](#resource_Escalation_Policies) and [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules).\nThis may be the result of that [user](#resource_Users) always being on call for the [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules), or a block of time during which the computed result of a [schedule](#resource_Schedules) on that [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules) puts the user on call.\n\n\nDuring an on-call, the [user](#resource_Users) is expected to bear responsibility for responding to any [notifications](#resource_Notifications) he or she receives and working to resolve the associated [incident(s)](#resource_Incidents).\n\n\nOn-calls cannot be created directly through the API; they are the computed result of how [escalation policies](#resource_Escalation_Policies) and [schedules](#resource_Schedules) are configured.\nThe API provides read-only access to the on-calls generated by PagerDuty.\n"
    },
    {
      "name": "Priorities",
      "description": "A priority is a label representing the importance and impact of an incident. This feature is only available on Standard and Enterprise plans.\n"
    },
    {
      "name": "Response Plays",
      "description": "Response plays let you create packages of incident actions that can be applied at any time to an incident with just a single button click, or that can be immediately applied to all new incidents created on a service.\nThis enables you to take a complex activity, like assembling a response team of multiple on-calls and an incident commander, and make it available to anyone that needs to use it.\n"
    },
    {
      "name": "Schedules",
      "description": "An on-call schedule determines the time periods that users are [on call](#resource_On-Calls).\nOnly [on-call](#resource_On-Calls) [users](#resource_Users) are eligible to receive [notifications](#resource_Notifications) from [incidents](#resource_Incidents).\n\n\nThe details of the on-call schedule specify which single [user](#resource_Users) is [on call](#resource_On-Calls) for that schedule at any given point in time.\nAn on-call schedule consists of one or more [schedule layers](https://support.pagerduty.com/hc/en-us/articles/202830250-Scheduling-Layers) that rotate a group of [users](#resource_Users) through the same shift at a set interval.\n\n\nRestrictions on each schedule layer limit on-call responsibility for that layer to certain times of the day or week.\nThe period of time during which a [user](#resource_Users) is present on a schedule layer is called a schedule layer entry.\n\n\nThe ordered composition of schedule layers, combined with any schedule layer entries from the override layer, known as [overrides](#!/Schedules/get_schedules_id_overrides), results in the final schedule layer.\nThe final schedule layer represents the computed set of schedule layer entries that put [users](#resource_Users) [on call](#resource_On-Calls) for the schedule, and cannot be modified directly.\n\n\nSchedules are used by [escalation policies](#resource_Escalation_Policies) as an escalation target for a given [escalation rule](#!/Escalation_Policies/get_escalation_policies_id_escalation_rules).\n\n\n[*Read more about on-call schedules in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/sections/200550790-On-Call-Schedules).\n"
    },
    {
      "name": "Services",
      "description": "A PagerDuty service represents something you monitor (like a web service, email service, or database service).\nIt is a container for related [incidents](#resource_Incidents) that associates them with [escalation policies](#resource_Escalation_Policies).\n\n\nA service is the focal point for [incident](#resource_Incidents) management; services specify the configuration for the behavior of [incidents](#resource_Incidents) triggered on them.\nThis behavior includes specifying urgency and performing automated actions based on time of day, [incident](#resource_Incidents) duration, and other factors.\n\n\n#### Integrations\n\n\nAn integration is an endpoint (like Nagios, email, or an API call) that generates events, which are normalized and de-duplicated by PagerDuty to create [incidents](#resource_Incidents).\nIntegrations feed events into services and provide event management functionality such as filtering and de-duplication.\n\n\n[*Read more about services in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/sections/200550800-Services).\n"
    },
    {
      "name": "Teams",
      "description": "A team is a collection of [users](#resource_Users) and [escalation policies](#resource_Escalation_Policies) that represent a group of people within an organization.\n\n\nTeams can be used throughout the API and PagerDuty applications to filter information to only what is relevant for one or more teams.\n\n\nThe account must have the teams ability to use the following endpoints.\n\n\n[*Read more about teams in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/articles/204072090-How-to-Create-Teams-in-PagerDuty-).\n"
    },
    {
      "name": "Users",
      "description": "PagerDuty users are members of a PagerDuty account that have the ability to interact with [incidents](#resource_Incidents) and other data on the account.\n\n\nUsers are fundamental agents of different types of actions in PagerDuty. A user can, among other things:\n- acknowlege, reassign, snooze, escalate, and resolve [incidents](#resource_Incidents)\n- configure [services](#resource_Services), [escalation policies](#resource_Escalation_Policies), [integrations](#!/Services/get_services_id_integrations_integration_id), [on-call schedules](#resource_Schedules), [teams](#resource_Teams), and more\n- go [on call](#resource_On-Calls) for one or more [schedules](#resource_Schedules) or [escalation policies](#resource_Escalation_Policies)\n- receive [notifications](#resource_Notifications)\n\n\nDepending on a user's role, he or she may have access to different parts of the account's data.\n\n\n[*Read more about users in the PagerDuty Knowledge Base*](https://support.pagerduty.com/hc/en-us/sections/200550780-Users).\n"
    },
    {
      "name": "Vendors",
      "description": "A PagerDuty vendor represents a specific type of integration. AWS Cloudwatch, Splunk, Datadog, etc are all examples of vendors\nthat can be integrated in PagerDuty by making an [integration](#!/Services/get_services_id_integrations_integration_id).\n\n\nVendored integrations (when compared to generic email and API integrations) are automatically configured with the right API or email\nfiltering settings for inbound events from that vendor. Some vendors also have associated integration guides\non the PagerDuty support site.\n"
    },
    {
      "name": "Webhooks V1",
      "description": "*Upgrade to the new Webhooks V2 Payload*\n"
    },
    {
      "name": "Webhooks V2",
      "description": "Webhooks let you receive HTTP callbacks when interesting events happen within your PagerDuty account. Details surrounding the interesting event will be sent via HTTP POST to a URL that you specify.\n\nPagerDuty currently supports incident-based webhooks. After adding a webhook URL to a PagerDuty service, the triggering of new incidents on that service will cause outgoing webhook messages to be sent to that URL. In addition, certain interesting changes to an incident's state will cause other types of incident webhook messages to be sent. Generally, any change to the `status` or `assignees` of an incident will cause an outgoing message to be sent.\n\nSee our knowledge base article [Whitelisting IPs](https://support.pagerduty.com/docs/whitelisting-ips#section-webhooks) for information on obtaining the list of IPs webhooks may come from.\n"
    }
  ],
  "servers": [
    {
      "url": "https://api.pagerduty.com",
      "description": "PagerDuty V2 API."
    }
  ],
  "components": {
    "parameters": {
      "id": {
        "name": "id",
        "description": "The ID of the resource.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "entity_type": {
        "name": "entity_type",
        "in": "path",
        "description": "Type of entity related with the tag",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "users",
            "teams",
            "escalation_policies"
          ]
        }
      },
      "team_user_id": {
        "name": "user_id",
        "in": "path",
        "description": "The user ID on the team.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "team_escalation_policy_id": {
        "name": "escalation_policy_id",
        "in": "path",
        "description": "The escalation policy ID on the team.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "escalation_policy_escalation_rule_id": {
        "name": "escalation_rule_id",
        "in": "path",
        "description": "The escalation rule ID on the escalation policy.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "include_addon": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "services"
          ]
        }
      },
      "include_escalation_policy": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "services",
            "teams",
            "targets"
          ]
        }
      },
      "include_log_entry": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "incidents",
            "services",
            "channels",
            "teams"
          ]
        }
      },
      "include_user": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "contact_methods",
            "notification_rules",
            "teams"
          ]
        }
      },
      "include_maintenance_window": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "teams",
            "services",
            "users"
          ]
        }
      },
      "include_teams": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "privileges"
          ]
        }
      },
      "include_teams_members": {
        "name": "include[]",
        "in": "query",
        "description": "Array of additional details to include.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "users"
          ]
        }
      },
      "sort_by_escalation_policy": {
        "name": "sort_by",
        "in": "query",
        "description": "Used to specify the field you wish to sort the results on.",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "name:asc",
            "name:desc"
          ],
          "default": "name"
        }
      },
      "sort_by_service": {
        "name": "sort_by",
        "in": "query",
        "description": "Used to specify the field you wish to sort the results on.",
        "schema": {
          "type": "string",
          "enum": [
            "name",
            "name:asc",
            "name:desc"
          ],
          "default": "name"
        }
      },
      "schedule_overflow": {
        "name": "overflow",
        "in": "query",
        "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter `overflow=true` is passed. This parameter defaults to false.\nFor instance, if your schedule is a rotation that changes daily at midnight UTC, and your date range is from `2011-06-01T10:00:00Z` to `2011-06-01T14:00:00Z`:\n\n\n- If you don't pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T10:00:00Z` and end of `2011-06-01T14:00:00Z`.\n- If you do pass the `overflow=true` parameter, you will get one schedule entry returned with a start of `2011-06-01T00:00:00Z` and end of `2011-06-02T00:00:00Z`.\n",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "schedule_override_id": {
        "name": "override_id",
        "in": "path",
        "description": "The override ID on the schedule.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "team_ids": {
        "name": "team_ids[]",
        "in": "query",
        "description": "An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      },
      "time_zone": {
        "name": "time_zone",
        "in": "query",
        "description": "Time zone in which dates in the result will be rendered.",
        "schema": {
          "type": "string",
          "format": "tzinfo",
          "default": "UTC"
        }
      },
      "services": {
        "name": "service_ids[]",
        "in": "query",
        "description": "An array of service IDs. Only results related to these services will be returned.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "integration_id": {
        "name": "integration_id",
        "in": "path",
        "description": "The integration ID on the service.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "log_entry_is_overview": {
        "name": "is_overview",
        "in": "query",
        "description": "If `true`, will return a subset of log entries that show only the most important changes to the incident.",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "since": {
        "name": "since",
        "in": "query",
        "description": "The start of the date range over which you want to search.",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "until": {
        "name": "until",
        "in": "query",
        "description": "The end of the date range over which you want to search.",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "date_range": {
        "name": "date_range",
        "in": "query",
        "description": "When set to all, the since and until parameters and defaults are ignored.",
        "schema": {
          "type": "string",
          "enum": [
            "all"
          ]
        }
      },
      "incident_key": {
        "name": "incident_key",
        "in": "query",
        "description": "Incident de-duplication key. Incidents with child alerts do not have an incident key; querying by incident key will return incidents whose alerts have alert_key matching the given incident key.",
        "schema": {
          "type": "string"
        }
      },
      "incident_services": {
        "name": "service_ids[]",
        "in": "query",
        "description": "Returns only the incidents associated with the passed service(s). This expects one or more service IDs.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      },
      "incident_assigned_to_user": {
        "name": "user_ids[]",
        "in": "query",
        "description": "Returns only the incidents currently assigned to the passed user(s). This expects one or more user IDs. Note: When using the assigned_to_user filter, you will only receive incidents with statuses of triggered or acknowledged. This is because resolved incidents are not assigned to any user.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        }
      },
      "incident_urgencies": {
        "name": "urgencies[]",
        "in": "query",
        "description": "Array of the urgencies of the incidents to be returned. Defaults to all urgencies. Account must have the `urgencies` ability to do this.",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "enum": [
            "high",
            "low"
          ]
        }
      },
      "from_header": {
        "name": "From",
        "in": "header",
        "description": "The email address of a valid user associated with the account making the request.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "email"
        }
      },
      "optional_from_header": {
        "name": "From",
        "in": "header",
        "description": "The email address of a valid user associated with the account making the request. This is optional, and is only used for change tracking.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "email"
        }
      },
      "user_contact_method_id": {
        "name": "contact_method_id",
        "in": "path",
        "description": "The contact method ID on the user.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "user_notification_rule_id": {
        "name": "notification_rule_id",
        "in": "path",
        "description": "The notification rule ID on the user.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "session_id": {
        "name": "session_id",
        "in": "path",
        "description": "The session ID for the user.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "type": {
        "name": "type",
        "in": "path",
        "description": "The session type for the user session ID.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "alert_key": {
        "name": "alert_key",
        "in": "query",
        "description": "Alert de-duplication key.",
        "schema": {
          "type": "string"
        }
      },
      "response_play_id": {
        "name": "response_play_id",
        "in": "path",
        "description": "The response play ID of the response play associated with the request.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "ArgumentError": {
        "description": "Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1vnd.pagerduty%2Bjson%3Bversion%3D2/schema"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Caller is not authorized to view the requested resource.\nWhile your authentication is valid, the authenticated user or token does not have permission to perform this action.\n",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1vnd.pagerduty%2Bjson%3Bversion%3D2/schema"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error the PagerDuty server experienced an error.",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1vnd.pagerduty%2Bjson%3Bversion%3D2/schema"
            }
          }
        }
      },
      "NotFound": {
        "description": "The requested resource was not found.",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "readOnly": true
                    },
                    "message": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Error message string"
                    },
                    "errors": {
                      "type": "array",
                      "readOnly": true,
                      "items": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Human-readable error details"
                      }
                    }
                  },
                  "example": {
                    "message": "Not Found",
                    "code": 2100
                  }
                }
              }
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests have been made, the rate limit has been reached.",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1vnd.pagerduty%2Bjson%3Bversion%3D2/schema"
            }
          }
        }
      },
      "PaymentRequired": {
        "description": "Account does not have the abilities to perform the action. Please review the response for the required abilities.\nYou can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.\n",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1vnd.pagerduty%2Bjson%3Bversion%3D2/schema"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Caller did not supply credentials or did not provide the correct credentials.\nIf you are using an API key, it may be invalid or your Authorization header may be malformed.\n",
        "content": {
          "application/vnd.pagerduty+json;version=2": {
            "schema": {
              "$ref": "#/components/responses/NotFound/content/application~1vnd.pagerduty%2Bjson%3Bversion%3D2/schema"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "The API Key with format `Token token=<API_KEY>`"
      }
    },
    "schemas": {
      "AddonReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "full_page_addon_reference": "#/models/Reference.yaml",
            "full_page_addon": "#/models/Addon.yaml",
            "incident_show_addon_reference": "#/models/Reference.yaml",
            "incident_show_addon": "#/models/Addon.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Addon"
          }
        ]
      },
      "Addon": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the add-on.",
            "maxLength": 100
          },
          "src": {
            "type": "string",
            "format": "url",
            "description": "The source URL to display in a frame in the PagerDuty UI. HTTPS is required."
          }
        },
        "required": [
          "name",
          "src"
        ],
        "example": {
          "type": "full_page_addon",
          "name": "Internal Status Page",
          "src": "https://intranet.example.com/status"
        }
      },
      "BusinessService": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the business service."
          },
          "description": {
            "type": "string",
            "description": "The user-provided description of the business service."
          },
          "point_of_contact": {
            "type": "string",
            "description": "The point of contact assigned to this service."
          },
          "team": {
            "type": "object",
            "title": "Team",
            "description": "Reference to the team that owns the business service.",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "A string that determines the schema of the object.",
                "readOnly": true
              },
              "self": {
                "type": "string",
                "format": "url",
                "description": "The API show URL at which the object is accessible.",
                "readOnly": true
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "example": {
          "type": "business_service",
          "name": "Self-serve mobile checkout",
          "description": "Checkout service for our mobile clients",
          "point_of_contact": "PagerDuty Admin",
          "team": {
            "type": "team_reference",
            "self": "https://api.pagerduty.com/teams/P3ZQXDF",
            "id": "P3ZQXDF"
          }
        }
      },
      "BusinessServiceReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "business_service_reference": "#/models/Reference.yaml",
            "business_service": "#/models/BusinessService.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/BusinessService"
          }
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The label of the tag.",
            "maxLength": 191
          }
        },
        "required": [
          "label"
        ],
        "example": {
          "type": "tag",
          "label": "Batman"
        }
      },
      "TagReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "tag_reference": "#/models/Reference.yaml",
            "tag": "#/models/Tag.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Tag"
          }
        ]
      },
      "EntityReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user_reference": "#/models/Reference.yaml",
            "team_reference": "#/models/Reference.yaml",
            "escalation_policy_reference": "#/models/Reference.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          }
        ]
      },
      "IncidentAddon": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Addon"
          },
          {
            "type": "object",
            "properties": {
              "services": {
                "type": "array",
                "description": "The services this add-on is associated with.\nIf non-empty, the add-on will appear only on incidents for those services.\nIf empty, it will appear on incidents for all services.\n",
                "items": {
                  "$ref": "#/components/schemas/ServiceReference"
                }
              }
            },
            "required": [
              "name",
              "src"
            ]
          }
        ],
        "example": {
          "type": "incident_show_addon",
          "name": "Service Runbook",
          "src": "https://intranet.example.com/runbook.html",
          "services": [
            {
              "id": "PIJ90N7",
              "type": "service",
              "summary": "My Application Service",
              "self": "https://api.pagerduty.com/services/PIJ90N7",
              "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
            }
          ]
        }
      },
      "IncidentUrgencyType": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of incident urgency: whether it's constant, or it's dependent on the support hours.",
            "default": "constant",
            "enum": [
              "constant",
              "use_support_hours"
            ]
          },
          "urgency": {
            "type": "string",
            "description": "The incidents' urgency, if type is constant.",
            "default": "high",
            "enum": [
              "low",
              "high",
              "severity_based"
            ]
          }
        }
      },
      "IncidentUrgencyRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IncidentUrgencyType"
          },
          {
            "type": "object",
            "properties": {
              "during_support_hours": {
                "$ref": "#/components/schemas/IncidentUrgencyType"
              },
              "outside_support_hours": {
                "$ref": "#/components/schemas/IncidentUrgencyType"
              }
            }
          }
        ]
      },
      "SupportHours": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of support hours",
            "default": "fixed_time_per_day",
            "enum": [
              "fixed_time_per_day"
            ]
          },
          "time_zone": {
            "type": "string",
            "format": "activesupport-time-zone",
            "description": "The time zone for the support hours"
          },
          "days_of_week": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer",
              "readOnly": true,
              "description": "The days of the week (1 through 7, for Monday through Sunday)"
            }
          },
          "start_time": {
            "type": "string",
            "format": "time",
            "description": "The support hours' starting time of day (date portion is ignored)"
          },
          "end_time": {
            "type": "string",
            "format": "time",
            "description": "The support hours' ending time of day (date portion is ignored)"
          }
        }
      },
      "Reference": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "summary": {
            "type": "string",
            "description": "A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier."
          },
          "type": {
            "type": "string",
            "description": "A string that determines the schema of the object. This must be the standard name for the entity, suffixed by `_reference` if the object is a reference."
          },
          "self": {
            "type": "string",
            "format": "url",
            "description": "the API show URL at which the object is accessible"
          },
          "html_url": {
            "type": "string",
            "format": "url",
            "description": "a URL at which the entity is uniquely displayed in the Web app"
          }
        }
      },
      "IncidentNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          },
          "content": {
            "type": "string",
            "description": "The note content"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the note was submitted",
            "readOnly": true
          }
        },
        "example": {
          "content": "Firefighters are on the scene."
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of notification.",
            "enum": [
              "sms_notification",
              "email_notification",
              "phone_notification",
              "push_notification"
            ]
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which the notification was sent",
            "readOnly": true
          },
          "address": {
            "type": "string",
            "description": "The address where the notification was sent. This will be null for notification type `push_notification`.",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          }
        }
      },
      "Context": {
        "type": "object",
        "discriminator": {
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of context being attached to the incident.",
            "enum": [
              "link",
              "image"
            ]
          },
          "href": {
            "type": "string",
            "description": "The link's target url"
          },
          "src": {
            "type": "string",
            "description": "The image's source url"
          },
          "text": {
            "type": "string",
            "description": "The alternate display for an image"
          }
        },
        "required": [
          "type"
        ]
      },
      "Channel": {
        "type": "object",
        "description": "Polymorphic object representation of the means by which the action was channeled. Has different formats depending on type, indicated by channel[type]. Will be one of `auto`, `email`, `api`, `nagios`, or `timeout` if `agent[type]` is `service`. Will be one of `email`, `sms`, `website`, `web_trigger`, or `note` if `agent[type]` is `user`. See [below](https://developer.pagerduty.com/documentation/rest/log_entries/show#channel_types) for detailed information about channel formats.",
        "properties": {
          "type": {
            "type": "string",
            "description": "type"
          },
          "user": {
            "type": "object",
            "description": "user"
          },
          "team": {
            "type": "object",
            "description": "team"
          },
          "channel": {
            "type": "object",
            "description": "channel"
          }
        },
        "required": [
          "type"
        ]
      },
      "NotifyLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogEntry"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "Time at which the log entry was created"
              },
              "user": {
                "$ref": "#/components/schemas/UserReference"
              }
            }
          }
        ]
      },
      "ScheduledAction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of schedule action. Must be set to urgency_change.",
            "enum": [
              "urgency_change"
            ]
          },
          "at": {
            "type": "object",
            "description": "Represents when scheduled action will occur.",
            "properties": {
              "type": {
                "type": "string",
                "description": "Must be set to named_time.",
                "enum": [
                  "named_time"
                ]
              },
              "name": {
                "type": "string",
                "description": "Designates either the start or the end of support hours.",
                "enum": [
                  "support_hours_start",
                  "support_hours_end"
                ]
              }
            },
            "required": [
              "type",
              "name"
            ]
          },
          "to_urgency": {
            "type": "string",
            "description": "Urgency level. Must be set to high.",
            "enum": [
              "high"
            ]
          }
        },
        "required": [
          "type",
          "at",
          "to_urgency"
        ]
      },
      "SnoozeLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogEntry"
          },
          {
            "type": "object",
            "properties": {
              "changed_actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IncidentAction"
                }
              }
            }
          }
        ]
      },
      "IncidentAction": {
        "description": "An incident action is a pending change to an incident that will automatically happen at some future time.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "unacknowledge",
              "escalate",
              "resolve",
              "urgency_change"
            ]
          },
          "at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "discriminator": {
          "propertyName": "type"
        },
        "required": [
          "type",
          "at"
        ]
      },
      "AssignLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogEntry"
          },
          {
            "type": "object",
            "properties": {
              "assigned_user": {
                "$ref": "#/components/schemas/UserReference"
              }
            }
          }
        ]
      },
      "EscalateLogEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogEntry"
          },
          {
            "type": "object",
            "properties": {
              "assigned_user": {
                "$ref": "#/components/schemas/UserReference"
              }
            }
          }
        ]
      },
      "LogEntryReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "acknowledge_log_entry": "#/models/AcknowledgeLogEntry.yaml",
            "acknowledge_log_entry_reference": "#/models/Reference.yaml",
            "annotate_log_entry": "#/models/LogEntry.yaml",
            "annotate_log_entry_reference": "#/models/Reference.yaml",
            "assign_log_entry": "#/models/AssignLogEntry.yaml",
            "assign_log_entry_reference": "#/models/Reference.yaml",
            "escalate_log_entry": "#/models/EscalateLogEntry.yaml",
            "escalate_log_entry_reference": "#/models/Reference.yaml",
            "exhaust_escalation_path_log_entry": "#/models/LogEntry.yaml",
            "exhaust_escalation_path_log_entry_reference": "#/models/Reference.yaml",
            "notify_log_entry": "#/models/NotifyLogEntry.yaml",
            "notify_log_entry_reference": "#/models/Reference.yaml",
            "reach_trigger_limit_log_entry": "#/models/LogEntry.yaml",
            "reach_trigger_limit_log_entry_reference": "#/models/Reference.yaml",
            "repeat_escalation_path_log_entry": "#/models/LogEntry.yaml",
            "repeat_escalation_path_log_entry_reference": "#/models/Reference.yaml",
            "resolve_log_entry": "#/models/LogEntry.yaml",
            "resolve_log_entry_reference": "#/models/Reference.yaml",
            "snooze_log_entry": "#/models/SnoozeLogEntry.yaml",
            "snooze_log_entry_reference": "#/models/Reference.yaml",
            "trigger_log_entry": "#/models/LogEntry.yaml",
            "trigger_log_entry_reference": "#/models/Reference.yaml",
            "unacknowledge_log_entry": "#/models/LogEntry.yaml",
            "unacknowledge_log_entry_reference": "#/models/Reference.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/LogEntry"
          },
          {
            "$ref": "#/components/schemas/AssignLogEntry"
          },
          {
            "$ref": "#/components/schemas/EscalateLogEntry"
          },
          {
            "$ref": "#/components/schemas/NotifyLogEntry"
          },
          {
            "$ref": "#/components/schemas/SnoozeLogEntry"
          }
        ]
      },
      "LogEntry": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Time at which the log entry was created."
          },
          "channel": {
            "$ref": "#/components/schemas/Channel"
          },
          "agent": {
            "$ref": "#/components/schemas/Agent"
          },
          "note": {
            "type": "string",
            "readOnly": true,
            "description": "Optional field containing a note, if one was included with the log entry."
          },
          "contexts": {
            "type": "array",
            "readOnly": true,
            "description": "Contexts to be included with the trigger such as links to graphs or images.",
            "items": {
              "$ref": "#/components/schemas/Context"
            }
          },
          "service": {
            "$ref": "#/components/schemas/ServiceReference"
          },
          "incident": {
            "$ref": "#/components/schemas/IncidentReference"
          },
          "teams": {
            "type": "array",
            "readOnly": true,
            "description": "Will consist of references unless included",
            "items": {
              "$ref": "#/components/schemas/TeamReference"
            }
          },
          "event_details": {
            "type": "object",
            "readOnly": true,
            "properties": {
              "description": {
                "type": "string",
                "description": "Additional details about the event."
              }
            }
          }
        }
      },
      "Agent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "The agent (user, service or integration) that created or modified the ILE.",
            "properties": {
              "type": {
                "enum": [
                  "user",
                  "service",
                  "integration",
                  "user_reference",
                  "service_reference",
                  "integration_reference"
                ],
                "type": "string"
              }
            },
            "readOnly": true
          }
        ]
      },
      "NotificationRuleReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of notification rule.",
                "readOnly": true,
                "enum": [
                  "assignment_notification_rule"
                ]
              }
            }
          }
        ]
      },
      "NotificationRule": {
        "type": "object",
        "description": "A rule for contacting the user.",
        "properties": {
          "start_delay_in_minutes": {
            "type": "integer",
            "description": "The delay before firing the rule, in minutes.",
            "minimum": 0
          },
          "contact_method": {
            "$ref": "#/components/schemas/ContactMethodReference"
          },
          "urgency": {
            "type": "string",
            "enum": [
              "high",
              "low"
            ],
            "description": "Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule."
          }
        },
        "required": [
          "start_delay_in_minutes",
          "urgency",
          "contact_method",
          "type"
        ],
        "example": {
          "type": "assignment_notification_rule",
          "start_delay_in_minutes": 0,
          "contact_method": {
            "id": "PXPGF42",
            "type": "email_contact_method"
          },
          "urgency": "high"
        }
      },
      "ContactMethodReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "email_contact_method_reference": "#/models/Reference.yaml",
            "email_contact_method": "#/models/EmailContactMethod.yaml",
            "phone_contact_method_reference": "#/models/Reference.yaml",
            "phone_contact_method": "#/models/PhoneContactMethod.yaml",
            "push_notification_contact_method_reference": "#/models/Reference.yaml",
            "push_notification_contact_method": "#/models/PushContactMethod.yaml",
            "sms_contact_method_reference": "#/models/Reference.yaml",
            "sms_contact_method": "#/models/PhoneContactMethod.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/EmailContactMethod"
          },
          {
            "$ref": "#/components/schemas/PushContactMethod"
          },
          {
            "$ref": "#/components/schemas/PhoneContactMethod"
          }
        ]
      },
      "ContactMethod": {
        "type": "object",
        "description": "The method to contact a user.",
        "properties": {
          "label": {
            "type": "string",
            "description": "The label (e.g., \"Work\", \"Mobile\", etc.)."
          },
          "address": {
            "type": "string",
            "description": "The \"address\" to deliver to: email, phone number, etc., depending on the type."
          }
        },
        "discriminator": {
          "propertyName": "type"
        },
        "required": [
          "type",
          "label",
          "address"
        ]
      },
      "EmailContactMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMethod"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "email_contact_method"
                ]
              },
              "send_short_email": {
                "type": "boolean",
                "description": "Send an abbreviated email message instead of the standard email output. Useful for email-to-SMS gateways and email based pagers.",
                "default": false
              }
            },
            "example": {
              "type": "email_contact_method",
              "label": "work",
              "address": "grady.haylie.126@hickle.net",
              "send_short_email": false
            }
          }
        ]
      },
      "PhoneContactMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMethod"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "phone_contact_method",
                  "sms_contact_method"
                ]
              },
              "country_code": {
                "type": "integer",
                "description": "The 1-to-3 digit country calling code.",
                "minimum": 1,
                "maximum": 1999
              },
              "enabled": {
                "type": "boolean",
                "description": "If true, this phone is capable of receiving SMS messages.",
                "readOnly": true
              },
              "blacklisted": {
                "type": "boolean",
                "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.",
                "readOnly": true
              }
            },
            "required": [
              "country_code"
            ],
            "example": {
              "type": "phone_contact_method",
              "label": "work",
              "country_code": 123,
              "address": "1234567"
            }
          }
        ]
      },
      "PushContactMethodSound": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of sound.",
            "enum": [
              "alert_high_urgency",
              "alert_low_urgency"
            ]
          },
          "file": {
            "type": "string",
            "description": "The sound file name."
          }
        }
      },
      "PushContactMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactMethod"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "push_notification_contact_method"
                ]
              },
              "device_type": {
                "type": "string",
                "description": "The type of device.",
                "enum": [
                  "android",
                  "ios"
                ],
                "readOnly": true
              },
              "sounds": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PushContactMethodSound"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Time at which the contact method was created."
              },
              "blacklisted": {
                "type": "boolean",
                "description": "If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.",
                "readOnly": true
              }
            },
            "required": [
              "device_type"
            ],
            "example": {
              "type": "push_notification_contact_method",
              "label": "work",
              "device_type": "android",
              "address": "12341234"
            }
          }
        ]
      },
      "UserRole": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the user for a set of resources.",
            "enum": [
              "observer",
              "responder",
              "manager"
            ],
            "example": {
              "role": "observer"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        },
        "example": {
          "role": "manager",
          "resources": [
            {
              "id": "PANZZEQ",
              "type": "escalation_policy",
              "summary": "Engineering Escalation Policy",
              "self": "https://api.pagerduty.com/escalation_policies/PANZZEQ",
              "html_url": "https://subdomain.pagerduty.com/escalation_policies/PANZZEQ"
            },
            {
              "id": "PI7DH85",
              "type": "schedule",
              "summary": "Daily Engineering Rotation",
              "self": "https://api.pagerduty.com/schedules/PI7DH85",
              "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
            }
          ]
        }
      },
      "UserReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user_reference": "#/models/Reference.yaml",
            "user": "#/models/User.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/User"
          }
        ]
      },
      "UserSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "user_id": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time the user session was first created."
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "The type of the session",
            "enum": [
              "browser",
              "oauth"
            ]
          },
          "summary": {
            "type": "string",
            "readOnly": true,
            "description": "The summary of the session"
          }
        },
        "required": [
          "id",
          "user_id",
          "created_at",
          "type",
          "summary"
        ],
        "example": {
          "id": "PXPGF42",
          "user_id": "PXPGF42",
          "created_at": "2018-10-06T21:30:42.000Z",
          "summary": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36",
          "type": "browser"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user.",
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address.",
            "minLength": 6,
            "maxLength": 100
          },
          "time_zone": {
            "type": "string",
            "format": "tzinfo",
            "description": "The preferred time zone name. If null, the account's time zone will be used."
          },
          "color": {
            "type": "string",
            "description": "The schedule color."
          },
          "role": {
            "description": "The user role. Account must have the `read_only_users` ability to set a user as a `read_only_user` or a `read_only_limited_user`, and must have advanced permissions abilities to set a user as `observer` or `restricted_access`.",
            "type": "string",
            "enum": [
              "admin",
              "limited_user",
              "observer",
              "owner",
              "read_only_user",
              "restricted_access",
              "read_only_limited_user",
              "user"
            ]
          },
          "avatar_url": {
            "type": "string",
            "format": "url",
            "description": "The URL of the user's avatar.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The user's bio."
          },
          "invitation_sent": {
            "type": "boolean",
            "readOnly": true,
            "description": "If true, the user has an outstanding invitation."
          },
          "job_title": {
            "type": "string",
            "description": "The user's title.",
            "maxLength": 100
          },
          "teams": {
            "type": "array",
            "readOnly": true,
            "description": "The list of teams to which the user belongs. Account must have the `teams` ability to set this.",
            "items": {
              "$ref": "#/components/schemas/TeamReference"
            }
          },
          "contact_methods": {
            "type": "array",
            "readOnly": true,
            "description": "The list of contact methods for the user.",
            "items": {
              "$ref": "#/components/schemas/ContactMethodReference"
            }
          },
          "notification_rules": {
            "readOnly": true,
            "type": "array",
            "description": "The list of notification rules for the user.",
            "items": {
              "$ref": "#/components/schemas/NotificationRule"
            }
          }
        },
        "required": [
          "name",
          "email"
        ],
        "example": {
          "type": "user",
          "name": "Earline Greenholt",
          "email": "125.greenholt.earline@graham.name",
          "time_zone": "America/Lima",
          "color": "green",
          "role": "admin",
          "job_title": "Director of Engineering",
          "avatar_url": "https://secure.gravatar.com/avatar/1d1a39d4635208d5664082a6c654a73f.png?d=mm&r=PG",
          "description": "I'm the boss"
        }
      },
      "TeamReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "team_reference": "#/models/Reference.yaml",
            "team": "#/models/Team.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Team"
          }
        ]
      },
      "Team": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "The description of the team.",
            "maxLength": 1024
          },
          "parent": {
            "$ref": "#/components/schemas/TeamReference"
          }
        },
        "required": [
          "name"
        ],
        "example": {
          "type": "team",
          "name": "Engineering",
          "description": "The engineering team"
        }
      },
      "IncidentReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "incident_reference": "#/models/Reference.yaml",
            "incident": "#/models/Incident.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Incident"
          }
        ]
      },
      "Incident": {
        "type": "object",
        "properties": {
          "incident_number": {
            "type": "integer",
            "readOnly": true,
            "description": "The number of the incident. This is unique across your account."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time the incident was first triggered."
          },
          "status": {
            "type": "string",
            "description": "The current status of the incident.",
            "enum": [
              "triggered",
              "acknowledged",
              "resolved"
            ]
          },
          "title": {
            "type": "string",
            "readOnly": false,
            "description": "A succinct description of the nature, symptoms, cause, or effect of the incident."
          },
          "pending_actions": {
            "type": "array",
            "readOnly": true,
            "description": "The list of pending_actions on the incident. A pending_action object contains a type of action which can be escalate, unacknowledge, resolve or urgency_change. A pending_action object contains at, the time at which the action will take place. An urgency_change pending_action will contain to, the urgency that the incident will change to.",
            "items": {
              "$ref": "#/components/schemas/IncidentAction"
            }
          },
          "incident_key": {
            "type": "string",
            "readOnly": true,
            "description": "The incident's de-duplication key."
          },
          "service": {
            "$ref": "#/components/schemas/ServiceReference"
          },
          "assignments": {
            "type": "array",
            "description": "List of all assignments for this incident.",
            "items": {
              "$ref": "#/components/schemas/Assignment"
            }
          },
          "assigned_via": {
            "type": "string",
            "description": "How the current incident assignments were decided.  Note that `direct_assignment` incidents will not escalate up the attached `escalation_policy`",
            "enum": [
              "escalation_policy",
              "direct_assignment"
            ],
            "readOnly": true
          },
          "acknowledgements": {
            "type": "array",
            "description": "List of all acknowledgements for this incident.",
            "items": {
              "$ref": "#/components/schemas/Acknowledgement"
            }
          },
          "last_status_change_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The time at which the status of the incident last changed."
          },
          "last_status_change_by": {
            "$ref": "#/components/schemas/Agent"
          },
          "first_trigger_log_entry": {
            "$ref": "#/components/schemas/LogEntryReference"
          },
          "escalation_policy": {
            "$ref": "#/components/schemas/EscalationPolicyReference"
          },
          "teams": {
            "type": "array",
            "description": "The teams involved in the incident’s lifecycle.",
            "items": {
              "$ref": "#/components/schemas/TeamReference"
            }
          },
          "priority": {
            "$ref": "#/components/schemas/PriorityReference"
          },
          "urgency": {
            "type": "string",
            "enum": [
              "high",
              "low"
            ],
            "description": "The current urgency of the incident."
          },
          "resolve_reason": {
            "$ref": "#/components/schemas/ResolveReason"
          },
          "alert_counts": {
            "$ref": "#/components/schemas/AlertCount"
          },
          "conference_bridge": {
            "$ref": "#/components/schemas/ConferenceBridge"
          },
          "body": {
            "$ref": "#/components/schemas/IncidentBody"
          }
        }
      },
      "EscalationPolicyReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "escalation_policy_reference": "#/models/Reference.yaml",
            "escalation_policy": "#/models/EscalationPolicy.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/EscalationPolicy"
          }
        ]
      },
      "EscalationPolicy": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the escalation policy."
          },
          "description": {
            "type": "string",
            "description": "Escalation policy description."
          },
          "num_loops": {
            "type": "integer",
            "description": "The number of times the escalation policy will repeat after reaching the end of its escalation.",
            "default": 0,
            "minimum": 0
          },
          "on_call_handoff_notifications": {
            "type": "string",
            "description": "Determines how on call handoff notifications will be sent for users on the escalation policy. Defaults to \"if_has_services\".",
            "enum": [
              "if_has_services",
              "always"
            ]
          },
          "escalation_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EscalationRule"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceReference"
            },
            "minLength": 0
          },
          "teams": {
            "type": "array",
            "description": "Teams associated with the policy. Account must have the `teams` ability to use this parameter.",
            "items": {
              "$ref": "#/components/schemas/TeamReference"
            },
            "minLength": 0
          }
        },
        "required": [
          "name",
          "escalation_rules"
        ],
        "example": {
          "type": "escalation_policy",
          "name": "Engineering Escalation Policy",
          "escalation_rules": [
            {
              "escalation_delay_in_minutes": 30,
              "targets": [
                {
                  "id": "PEYSGVF",
                  "type": "user_reference"
                }
              ]
            }
          ],
          "services": [
            {
              "id": "PIJ90N7",
              "type": "service_reference"
            }
          ],
          "num_loops": 2,
          "on_call_handoff_notifications": "if_has_services",
          "teams": [
            {
              "id": "PQ9K7I8",
              "type": "team_reference"
            }
          ],
          "description": "Here is the ep for the engineering team."
        }
      },
      "EscalationRule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "escalation_delay_in_minutes": {
            "type": "integer",
            "description": "The number of minutes before an unacknowledged incident escalates away from this rule."
          },
          "targets": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10,
            "description": "The targets an incident should be assigned to upon reaching this rule.",
            "items": {
              "$ref": "#/components/schemas/EscalationTarget"
            }
          }
        },
        "required": [
          "escalation_delay_in_minutes",
          "targets"
        ],
        "example": {
          "escalation_delay_in_minutes": 30,
          "targets": [
            {
              "id": "PAM4FGS",
              "type": "user_reference"
            },
            {
              "id": "PI7DH85",
              "type": "schedule_reference"
            }
          ]
        }
      },
      "EscalationTarget": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "The escalation target is the entity that will be assigned an incident upon escalation.",
            "properties": {
              "type": {
                "enum": [
                  "user",
                  "schedule",
                  "user_reference",
                  "schedule_reference"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "ExtensionReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "extension_reference": "#/models/Reference.yaml",
            "extension": "#/models/Extension.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Extension"
          }
        ]
      },
      "Extension": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the extension."
          },
          "endpoint_url": {
            "type": "string",
            "format": "url",
            "description": "The url of the extension."
          },
          "extension_objects": {
            "type": "array",
            "description": "The objects for which the extension applies",
            "items": {
              "$ref": "#/components/schemas/ServiceReference"
            }
          },
          "extension_schema": {
            "$ref": "#/components/schemas/ExtensionSchemaReference"
          }
        },
        "required": [
          "extension_objects",
          "extension_schema",
          "name"
        ],
        "example": {
          "id": "PPGPXHO",
          "self": "https://api.pagerduty.com/extensions/PPGPXHO",
          "html_url": "null",
          "endpoint_url": "https://example.com/recieve_a_pagerduty_webhook",
          "name": "My Webhook",
          "summary": "My Webhook",
          "type": "extension",
          "extension_schema": {
            "id": "PJFWPEP",
            "type": "extension_schema_reference",
            "summary": "Generic Webhook",
            "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP",
            "html_url": "null"
          },
          "extension_objects": [
            {
              "id": "PIJ90N7",
              "type": "service_reference",
              "summary": "My Application Service",
              "self": "https://api.pagerduty.com/services/PIJ90N7",
              "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
            }
          ]
        }
      },
      "GenericEventsApiIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/GenericEventsApiIntegrationReference"
          }
        ]
      },
      "GenericEventsApiIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "generic_events_api_inbound_integration",
                  "generic_events_api_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "AwsCloudwatchIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/AwsCloudwatchIntegrationReference"
          }
        ]
      },
      "AwsCloudwatchIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "aws_cloudwatch_inbound_integration",
                  "aws_cloudwatch_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "EventTransformerApiIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/EventTransformerApiIntegrationReference"
          }
        ]
      },
      "EventTransformerApiIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "event_transformer_api_inbound_integration",
                  "event_transformer_api_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "NagiosIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/NagiosIntegrationReference"
          }
        ]
      },
      "NagiosIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "nagios_inbound_integration",
                  "nagios_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "GenericEmailIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericEmailIntegrationReference"
          },
          {
            "$ref": "#/components/schemas/EmailBasedIntegration"
          }
        ]
      },
      "GenericEmailIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "generic_email_inbound_integration",
                  "generic_email_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "KeynoteIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/KeynoteIntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "severity_filter": {
                "type": "string",
                "description": "Specifies what severity levels will create a new open incident. It can be one of:\n\n\n- `critical`: Incidents are created when an alarm enters the critical state.\n- `critical_or_warning`: Incidents are created when an alarm enters the critical **or** warning state.\n",
                "enum": [
                  "critical",
                  "critical_or_warning"
                ]
              }
            }
          }
        ]
      },
      "KeynoteIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "keynote_inbound_integration",
                  "keynote_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "PingdomIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/PingdomIntegrationReference"
          }
        ]
      },
      "PingdomIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "pingdom_inbound_integration",
                  "pingdom_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "HpSiteScopeIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/HpSiteScopeIntegrationReference"
          }
        ]
      },
      "HpSiteScopeIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "hp_site_scope",
                  "hp_site_scope_reference"
                ]
              }
            }
          }
        ]
      },
      "SqlMonitorIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailBasedIntegration"
          },
          {
            "$ref": "#/components/schemas/SqlMonitorIntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "severity_filter": {
                "type": "string",
                "description": "Specifies what severity levels will create a new open incident. It can be one of:\n\n\n- `on_any`: Incidents are created for alerts of any severity.\n- `on_high`: Incidents are created for alerts with high severity.\n- `on_medium_high`: Incidents are created for with high or medium severity.\n",
                "enum": [
                  "on_any",
                  "on_high",
                  "on_medium_high"
                ]
              }
            }
          }
        ]
      },
      "SqlMonitorIntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sql_monitor_inbound_integration",
                  "sql_monitor_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "ApiBasedIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integration"
          },
          {
            "type": "object",
            "properties": {
              "integration_key": {
                "type": "string",
                "description": "This is the unique key used to route events to this integration when received via the PagerDuty Events API."
              }
            }
          }
        ]
      },
      "EmailBasedIntegration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Integration"
          },
          {
            "type": "object",
            "properties": {
              "integration_email": {
                "type": "string",
                "description": "This is the unique fully-qualified email address used for routing emails to this integration for processing."
              }
            }
          }
        ]
      },
      "ServiceReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "service_reference": "#/models/Reference.yaml",
            "service": "#/models/Service.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Service"
          }
        ]
      },
      "Service": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "A string that determines the schema of the object."
          },
          "name": {
            "type": "string",
            "description": "The name of the service."
          },
          "description": {
            "type": "string",
            "description": "The user-provided description of the service."
          },
          "auto_resolve_timeout": {
            "type": "integer",
            "description": "Time in seconds that an incident is automatically resolved if left open for that long. Value is `null` if the feature is disabled. Value must not be negative. Setting this field to `0`, `null` (or unset in POST request) will disable the feature.",
            "default": 14400
          },
          "acknowledgement_timeout": {
            "type": "integer",
            "description": "Time in seconds that an incident changes to the Triggered State after being Acknowledged. Value is `null` if the feature is disabled. Value must not be negative. Setting this field to `0`, `null` (or unset in POST request) will disable the feature.",
            "default": 1800
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time when this service was created"
          },
          "status": {
            "type": "string",
            "description": "The current state of the Service. Valid statuses are:\n\n\n- `active`: The service is enabled and has no open incidents.\n- `warning`: The service is enabled and has one or more acknowledged incidents.\n- `critical`: The service is enabled and has one or more triggered incidents.\n- `maintenance`: The service is under maintenance, no new incidents will be triggered during maintenance mode.\n- `disabled`: The service is disabled and will not have any new triggered incidents.\n",
            "enum": [
              "active",
              "warning",
              "critical",
              "maintenance",
              "disabled"
            ]
          },
          "last_incident_timestamp": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time when the most recent incident was created for this service."
          },
          "escalation_policy": {
            "$ref": "#/components/schemas/EscalationPolicyReference"
          },
          "teams": {
            "type": "array",
            "readOnly": true,
            "description": "The set of teams associated with this service.",
            "items": {
              "$ref": "#/components/schemas/TeamReference"
            }
          },
          "integrations": {
            "type": "array",
            "readOnly": true,
            "description": "An array containing Integration objects that belong to this service. If `integrations` is passed as an argument, these are full objects - otherwise, these are references.",
            "items": {
              "$ref": "#/components/schemas/IntegrationReference"
            }
          },
          "incident_urgency_rule": {
            "$ref": "#/components/schemas/IncidentUrgencyRule"
          },
          "support_hours": {
            "$ref": "#/components/schemas/SupportHours"
          },
          "scheduled_actions": {
            "type": "array",
            "description": "An array containing scheduled actions for the service.",
            "items": {
              "$ref": "#/components/schemas/ScheduledAction"
            }
          },
          "addons": {
            "type": "array",
            "description": "The array of add-ons associated with this service.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AddonReference"
            }
          },
          "alert_creation": {
            "type": "string",
            "description": "Whether a service creates only incidents, or both alerts and incidents. A service must create alerts in order to enable incident merging.\n* \"create_incidents\" - The service will create one incident and zero alerts for each incoming event.\n* \"create_alerts_and_incidents\" - The service will create one incident and one associated alert for each incoming event.\n",
            "enum": [
              "create_incidents",
              "create_alerts_and_incidents"
            ]
          },
          "alert_grouping": {
            "type": "string",
            "description": "Defines how alerts on this service will be automatically grouped into incidents. Note that the alert grouping features are available only on certain plans. There are three available options:\n* null - No alert grouping on the service. Each alert will create a separate incident;\n* \"time\" - All alerts within a specified duration will be grouped into the same incident. This duration is set in the `alert_grouping_timeout` setting (described below). Available on Standard, Enterprise, and Event Intelligence plans;\n* \"intelligent\" - Alerts will be intelligently grouped based on a machine learning model that looks at the alert summary, timing, and the history of grouped alerts. Available on Enterprise and Event Intelligence plans\n",
            "enum": [
              "time",
              "intelligent"
            ]
          },
          "alert_grouping_timeout": {
            "type": "integer",
            "description": "The duration in minutes within which to automatically group incoming alerts. This setting applies only when `alert_grouping` is set to `\"time\"`. To continue grouping alerts until the incident is resolved, set this value to `0`.\n"
          }
        },
        "example": {
          "type": "service",
          "name": "My Web App",
          "description": "My cool web application that does things.",
          "auto_resolve_timeout": 14400,
          "acknowledgement_timeout": 600,
          "status": "active",
          "escalation_policy": {
            "id": "PWIP6CQ",
            "type": "escalation_policy_reference"
          },
          "incident_urgency_rule": {
            "type": "use_support_hours",
            "during_support_hours": {
              "type": "constant",
              "urgency": "high"
            },
            "outside_support_hours": {
              "type": "constant",
              "urgency": "low"
            }
          },
          "support_hours": {
            "type": "fixed_time_per_day",
            "time_zone": "America/Lima",
            "start_time": "09:00:00",
            "end_time": 61200,
            "days_of_week": [
              1,
              2,
              3,
              4,
              5
            ]
          },
          "scheduled_actions": [
            {
              "type": "urgency_change",
              "at": {
                "type": "named_time",
                "name": "support_hours_start"
              },
              "to_urgency": "high"
            }
          ],
          "alert_creation": "create_alerts_and_incidents",
          "alert_grouping": "time",
          "alert_grouping_timeout": 2
        }
      },
      "PriorityReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "priority_reference": "#/models/Reference.yaml",
            "priority": "#/models/Priority.yaml"
          }
        },
        "required": [
          "type",
          "id"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Priority"
          }
        ]
      },
      "Priority": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user-provided short name of the priority."
          },
          "description": {
            "type": "string",
            "description": "The user-provided description of the priority."
          }
        }
      },
      "Integration": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IntegrationReference"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of this integration."
              },
              "service": {
                "$ref": "#/components/schemas/ServiceReference"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "description": "The date/time when this integration was created."
              },
              "vendor": {
                "$ref": "#/components/schemas/VendorReference"
              }
            }
          }
        ]
      },
      "IntegrationReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "aws_cloudwatch_inbound_integration",
                  "aws_cloudwatch_inbound_integration_reference",
                  "cloudkick_inbound_integration",
                  "cloudkick_inbound_integration_reference",
                  "event_transformer_api_inbound_integration",
                  "event_transformer_api_inbound_integration_reference",
                  "generic_email_inbound_integration",
                  "generic_email_inbound_integration_reference",
                  "generic_events_api_inbound_integration",
                  "generic_events_api_inbound_integration_reference",
                  "keynote_inbound_integration",
                  "keynote_inbound_integration_reference",
                  "nagios_inbound_integration",
                  "nagios_inbound_integration_reference",
                  "pingdom_inbound_integration",
                  "pingdom_inbound_integration_reference",
                  "sql_monitor_inbound_integration",
                  "sql_monitor_inbound_integration_reference"
                ]
              }
            }
          }
        ]
      },
      "MaintenanceWindowReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "maintenance_window_reference": "#/models/Reference.yaml",
            "maintenance_window": "#/models/MaintenanceWindow.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/MaintenanceWindow"
          }
        ]
      },
      "MaintenanceWindow": {
        "type": "object",
        "properties": {
          "sequence_number": {
            "type": "integer",
            "readOnly": true,
            "description": "The order in which the maintenance window was created."
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "This maintenance window's start time. This is when the services will stop creating incidents. If this date is in the past, it will be updated to be the current time."
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "This maintenance window's end time. This is when the services will start creating incidents again. This date must be in the future and after the `start_time`."
          },
          "description": {
            "type": "string",
            "description": "A description for this maintenance window."
          },
          "created_by": {
            "$ref": "#/components/schemas/UserReference"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceReference"
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamReference"
            },
            "readOnly": true
          }
        },
        "required": [
          "start_time",
          "end_time",
          "services"
        ],
        "example": {
          "type": "maintenance_window",
          "start_time": "2015-11-10T01:00:00.000Z",
          "end_time": "2015-11-10T03:00:00.000Z",
          "description": "Immanentizing the eschaton",
          "services": [
            {
              "id": "PIJ90N7",
              "type": "service_reference"
            }
          ]
        }
      },
      "ScheduleReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "schedule_reference": "#/models/Reference.yaml",
            "schedule": "#/models/Schedule.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Schedule"
          }
        ]
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "schedule_layers": {
            "type": "array",
            "description": "A list of schedule layers.",
            "items": {
              "$ref": "#/components/schemas/ScheduleLayer"
            }
          },
          "time_zone": {
            "type": "string",
            "format": "activesupport-time-zone",
            "description": "The time zone of the schedule."
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule"
          },
          "description": {
            "type": "string",
            "description": "The description of the schedule"
          },
          "final_schedule": {
            "$ref": "#/components/schemas/SubSchedule"
          },
          "overrides_subschedule": {
            "$ref": "#/components/schemas/SubSchedule"
          },
          "escalation_policies": {
            "type": "array",
            "readOnly": true,
            "description": "An array of all of the escalation policies that uses this schedule.",
            "items": {
              "$ref": "#/components/schemas/EscalationPolicyReference"
            }
          },
          "users": {
            "type": "array",
            "readOnly": true,
            "description": "An array of all of the users on the schedule.",
            "items": {
              "$ref": "#/components/schemas/UserReference"
            }
          }
        },
        "required": [
          "schedule_layers",
          "time_zone"
        ],
        "example": {
          "name": "Daily Engineering Rotation",
          "type": "schedule",
          "time_zone": "America/New_York",
          "description": "Rotation schedule for engineering",
          "schedule_layers": [
            {
              "name": "Night Shift",
              "start": "2015-11-07T01:00:00.000Z",
              "end": "2016-11-07T01:00:00.000Z",
              "rotation_virtual_start": "2015-11-07T01:00:00.000Z",
              "rotation_turn_length_seconds": 86400,
              "users": [
                {
                  "user": {
                    "id": "PXPGF42",
                    "type": "user"
                  }
                }
              ],
              "restrictions": [
                {
                  "type": "daily_restriction",
                  "start_time_of_day": "08:00:00",
                  "duration_seconds": 32400
                }
              ]
            }
          ]
        }
      },
      "SubSchedule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The name of the subschedule",
            "enum": [
              "Final Schedule",
              "Overrides"
            ]
          },
          "rendered_schedule_entries": {
            "type": "array",
            "readOnly": true,
            "description": "This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.",
            "items": {
              "$ref": "#/components/schemas/ScheduleLayerEntry"
            }
          },
          "rendered_coverage_percentage": {
            "type": "number",
            "readOnly": true,
            "description": "The percentage of the time range covered by this layer. Returns null unless since or until are set."
          }
        },
        "required": [
          "name"
        ]
      },
      "ScheduleLayer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "description": "The start time of this layer."
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "description": "The end time of this layer. If `null`, the layer does not end."
          },
          "users": {
            "type": "array",
            "description": "The ordered list of users on this layer. The position of the user on the list determines their order in the layer.",
            "items": {
              "$ref": "#/components/schemas/ScheduleLayerUser"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "An array of restrictions for the layer. A restriction is a limit on which period of the day or week the schedule layer can accept assignments.",
            "items": {
              "$ref": "#/components/schemas/Restriction"
            }
          },
          "rotation_virtual_start": {
            "type": "string",
            "format": "date-time",
            "description": "The effective start time of the layer. This can be before the start time of the schedule."
          },
          "rotation_turn_length_seconds": {
            "type": "integer",
            "description": "The duration of each on-call shift in seconds."
          },
          "name": {
            "type": "string",
            "description": "The name of the schedule layer."
          },
          "rendered_schedule_entries": {
            "type": "array",
            "readOnly": true,
            "description": "This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.",
            "items": {
              "$ref": "#/components/schemas/ScheduleLayerEntry"
            }
          },
          "rendered_coverage_percentage": {
            "type": "number",
            "readOnly": true,
            "description": "The percentage of the time range covered by this layer. Returns null unless since or until are set."
          }
        },
        "required": [
          "start",
          "users",
          "rotation_virtual_start",
          "rotation_turn_length_seconds"
        ]
      },
      "ScheduleLayerEntry": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserReference"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The start time of this entry."
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The end time of this entry. If null, the entry does not end."
          }
        },
        "required": [
          "start",
          "end"
        ]
      },
      "ScheduleLayerUser": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserReference"
          }
        },
        "required": [
          "user"
        ]
      },
      "Override": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "start": {
            "description": "The start date and time for the override.",
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "description": "The end date and time for the override.",
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          }
        },
        "required": [
          "start",
          "end",
          "user"
        ],
        "example": {
          "start": "2012-07-01T04:00:00.000Z",
          "end": "2012-07-02T04:00:00.000Z",
          "user": {
            "id": "PEYSGVF",
            "type": "user_reference"
          }
        }
      },
      "Restriction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Specify the types of `restriction`.",
            "enum": [
              "daily_restriction",
              "weekly_restriction"
            ]
          },
          "duration_seconds": {
            "type": "integer",
            "description": "The duration of the restriction in seconds."
          },
          "start_time_of_day": {
            "type": "string",
            "format": "partial-time",
            "description": "The start time in HH:mm:ss format."
          },
          "start_day_of_week": {
            "type": "integer",
            "description": "Only required for use with a `weekly_restriction` restriction type. The first day of the weekly rotation schedule as [ISO 8601 day](https://en.wikipedia.org/wiki/ISO_week_date) (1 is Monday, etc.)",
            "minimum": 1,
            "maximum": 7
          }
        },
        "discriminator": {
          "propertyName": "type"
        },
        "required": [
          "type",
          "duration_seconds",
          "start_time_of_day"
        ]
      },
      "WeeklyRestriction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Restriction"
          },
          {
            "type": "object",
            "properties": {
              "start_day_of_week": {
                "type": "integer",
                "description": "The first day of the weekly rotation schedule as [ISO 8601 day](https://en.wikipedia.org/wiki/ISO_week_date) (1 is Monday, etc.)",
                "minimum": 1,
                "maximum": 7
              }
            },
            "required": [
              "start_day_of_week"
            ]
          }
        ]
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "description": "Echoes offset pagination property.",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "description": "Echoes limit pagination property.",
            "readOnly": true
          },
          "more": {
            "type": "boolean",
            "description": "Indicates if there are additional records to return",
            "readOnly": true
          },
          "total": {
            "type": "integer",
            "description": "The total number of records matching the given query.",
            "readOnly": true
          }
        }
      },
      "Assignment": {
        "type": "object",
        "properties": {
          "at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the assignment was created."
          },
          "assignee": {
            "$ref": "#/components/schemas/UserReference"
          }
        },
        "required": [
          "at",
          "assignee"
        ]
      },
      "Acknowledgement": {
        "type": "object",
        "properties": {
          "at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the acknowledgement was created."
          },
          "acknowledger": {
            "$ref": "#/components/schemas/Acknowledger"
          }
        },
        "required": [
          "at",
          "acknowledger"
        ]
      },
      "Acknowledger": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "description": "The acknowledger represents the entity that made the acknowledgement for an incident.",
            "type": "object",
            "properties": {
              "type": {
                "enum": [
                  "user",
                  "service",
                  "user_reference",
                  "service_reference"
                ],
                "type": "string"
              }
            }
          }
        ]
      },
      "Oncall": {
        "type": "object",
        "properties": {
          "escalation_policy": {
            "$ref": "#/components/schemas/EscalationPolicyReference"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleReference"
          },
          "escalation_level": {
            "type": "integer",
            "readOnly": true,
            "description": "The escalation level for the on-call."
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The start of the on-call. If `null`, the on-call is a permanent user on-call."
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The end of the on-call. If `null`, the user does not go off-call."
          }
        },
        "example": {
          "user": {
            "id": "PT23IWX",
            "type": "user_reference",
            "summary": "Tim Wright",
            "self": "https://api.pagerduty.com/users/PT23IWX",
            "html_url": "https://subdomain.pagerduty.com/users/PT23IWX"
          },
          "schedule": {
            "id": "PI7DH85",
            "type": "schedule_reference",
            "summary": "Daily Engineering Rotation",
            "self": "https://api.pagerduty.com/schedules/PI7DH85",
            "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
          },
          "escalation_policy": {
            "id": "PT20YPA",
            "type": "escalation_policy_reference",
            "summary": "Engineering Escalation Policy",
            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
          },
          "escalation_level": 2,
          "start": "2015-03-06T20:28:51.000Z",
          "end": "2015-03-07T20:28:51.000Z"
        }
      },
      "VendorReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "vendor_reference": "#/models/Reference.yaml",
            "vendor": "#/models/Vendor.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Vendor"
          }
        ]
      },
      "Vendor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "The short name of the vendor"
          },
          "website_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL of the vendor's main website"
          },
          "logo_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL of a logo identifying the vendor"
          },
          "thumbnail_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL of a small thumbnail image identifying the vendor"
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "description": "A short description of this vendor, and common use-cases of integrations for this vendor."
          },
          "integration_guide_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL of an integration guide for this vendor"
          }
        },
        "example": {
          "type": "vendor",
          "name": "Amazon CloudWatch",
          "website_url": "https://aws.amazon.com/cloudwatch",
          "logo_url": "https://s3.amazonaws.com/pdpartner/cloudwatch_large.png",
          "thumbnail_url": "https://s3.amazonaws.com/pdpartner/cloudwatch_thumb.png",
          "description": "Amazon Web Services CloudWatch provides monitoring for AWS cloud resources and customer-run applications. AWS can collect data, gain insight, and alert users to fix problems within applications and organizations. AWS CloudWatch gives system-wide visibility into resource utilization and notifications can be set for when any metrics cross a specified threshold.",
          "integration_guide_url": "http://www.pagerduty.com/docs/guides/aws-cloudwatch-integration-guide/"
        }
      },
      "ExtensionSchemaReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "extension_schema_reference": "#/models/Reference.yaml",
            "extension_schema": "#/models/ExtensionSchema.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/ExtensionSchema"
          }
        ]
      },
      "ExtensionSchema": {
        "type": "object",
        "properties": {
          "icon_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "A small logo, 18-by-18 pixels."
          },
          "logo_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "A large logo, 75 pixels high and no more than 300 pixels wide."
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Human friendly display label"
          },
          "key": {
            "type": "string",
            "readOnly": true,
            "description": "Machine friendly display label"
          },
          "description": {
            "type": "string",
            "description": "The long description for the Extension"
          },
          "guide_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "A link to the extension's support guide"
          },
          "send_types": {
            "type": "array",
            "description": "The types of PagerDuty incident events that will activate this Extension",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "trigger",
                "acknowledge",
                "resolve",
                "delegate",
                "escalate",
                "unacknowledge",
                "assign",
                "custom"
              ]
            }
          },
          "url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "The url that the webhook payload will be sent to for this Extension."
          }
        },
        "example": {
          "id": "PJFWPEP",
          "type": "extension_schema",
          "summary": "Generic Webhook",
          "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP",
          "html_url": "null",
          "description": "Long description here",
          "guide_url": "v2.developer.pagerduty.com",
          "icon_url": "https://extension.com/extension.png",
          "key": "generic_webhook",
          "label": "Generic Webhook",
          "logo_url": "https://extension.com/logo.png",
          "send_types": [
            "trigger",
            "acknowledge",
            "resolve",
            "delegate",
            "escalate",
            "unacknowledge",
            "assign",
            "custom"
          ],
          "url": ""
        }
      },
      "ResolveReason": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The reason the incident was resolved. The only reason currently supported is merge.",
            "default": "merge_resolve_reason",
            "enum": [
              "merge_resolve_reason"
            ]
          },
          "incident": {
            "$ref": "#/components/schemas/IncidentReference"
          }
        }
      },
      "Alert": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The date/time the alert was first triggered."
          },
          "status": {
            "type": "string",
            "description": "The current status of the alert.",
            "enum": [
              "triggered",
              "resolved"
            ]
          },
          "alert_key": {
            "type": "string",
            "readOnly": true,
            "description": "The alert's de-duplication key."
          },
          "service": {
            "$ref": "#/components/schemas/ServiceReference"
          },
          "first_trigger_log_entry": {
            "$ref": "#/components/schemas/LogEntryReference"
          },
          "incident": {
            "$ref": "#/components/schemas/IncidentReference"
          },
          "suppressed": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether or not an alert is suppressed. Suppressed alerts are not created with a parent incident.",
            "default": false
          },
          "severity": {
            "type": "string",
            "readOnly": true,
            "description": "The magnitude of the problem as reported by the monitoring tool.",
            "enum": [
              "info",
              "warning",
              "error",
              "critical"
            ]
          },
          "integration": {
            "$ref": "#/components/schemas/Integration"
          },
          "body": {
            "type": "object",
            "readOnly": true,
            "description": "A JSON object containing data describing the alert.",
            "title": "Body",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of the body.",
                "enum": [
                  "alert_body"
                ]
              },
              "contexts": {
                "type": "array",
                "readOnly": true,
                "description": "Contexts to be included with the body such as links to graphs or images.",
                "items": {
                  "$ref": "#/components/schemas/Context"
                }
              },
              "details": {
                "type": "object",
                "readOnly": true,
                "description": "An arbitrary JSON object containing any data explaining the nature of the alert."
              }
            }
          }
        },
        "example": {
          "type": "alert",
          "status": "resolved",
          "incident": {
            "id": "PEYSGVF",
            "type": "incident_reference"
          },
          "body": {
            "type": "alert_body",
            "contexts": [
              {
                "type": "link"
              }
            ],
            "details": {
              "customKey": "Server is on fire!",
              "customKey2": "Other stuff!"
            }
          }
        }
      },
      "AlertReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "alert_reference": "#/models/Reference.yaml",
            "alert": "#/models/Alert.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Alert"
          }
        ]
      },
      "AlertCount": {
        "type": "object",
        "properties": {
          "triggered": {
            "type": "integer",
            "description": "The count of triggered alerts"
          },
          "resolved": {
            "type": "integer",
            "description": "The count of resolved alerts"
          },
          "all": {
            "type": "integer",
            "description": "The total count of alerts"
          }
        }
      },
      "IncidentBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incident_body"
            ]
          },
          "details": {
            "type": "string",
            "description": "Additional incident details."
          }
        },
        "required": [
          "type"
        ]
      },
      "StatusUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "description": "The message of the status update."
          },
          "created_at": {
            "type": "string",
            "description": "The date/time when this status update was created."
          },
          "sender": {
            "$ref": "#/components/schemas/UserReference"
          }
        }
      },
      "ResponderRequest": {
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/IncidentReference"
          },
          "requester": {
            "$ref": "#/components/schemas/UserReference"
          },
          "requested_at": {
            "type": "string",
            "description": "The time the request was made"
          },
          "message": {
            "type": "string",
            "description": "The message sent with the responder request"
          },
          "responder_request_targets": {
            "type": "array",
            "description": "The array of targets the responder request is being sent to",
            "items": {
              "$ref": "#/components/schemas/ResponderRequestTargetReference"
            }
          }
        }
      },
      "ResponderRequestTargetReference": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of target (either a user or an escalation policy)"
          },
          "id": {
            "type": "string",
            "description": "The id of the user or escalation policy"
          },
          "summary": {
            "type": "string"
          },
          "incident_responders": {
            "type": "array",
            "description": "An array of responders associated with the specified incident",
            "items": {
              "$ref": "#/components/schemas/IncidentsRespondersReference"
            }
          }
        }
      },
      "IncidentsRespondersReference": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The status of the responder being added to the incident",
            "example": "pending"
          },
          "user": {
            "$ref": "#/components/schemas/UserReference"
          },
          "incident": {
            "$ref": "#/components/schemas/IncidentReference"
          },
          "updated_at": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "description": "The message sent with the responder request"
          },
          "requester": {
            "$ref": "#/components/schemas/UserReference"
          },
          "requested_at": {
            "type": "string"
          }
        }
      },
      "ConferenceBridge": {
        "type": "object",
        "properties": {
          "conference_number": {
            "type": "string",
            "description": "The phone number of the conference call for the conference bridge. Phone numbers should be formatted like +1 415-555-1212,,,,1234#, where a comma (,) represents a one-second wait and pound (#) completes access code input."
          },
          "conference_url": {
            "type": "string",
            "format": "url",
            "description": "An URL for the conference bridge. This could be a link to a web conference or Slack channel."
          }
        }
      },
      "Action": {
        "type": "object",
        "description": "A message containing information about a single PagerDuty action.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies this outgoing webhook message; can be used for idempotency when processing the messages.",
            "readOnly": true
          },
          "triggered_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date/time when this message was was sent.",
            "readOnly": true
          },
          "webhook": {
            "$ref": "#/components/schemas/Webhook"
          }
        }
      },
      "WebhookIncidentAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Action"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of action being reported by this message. * `incident.trigger` - Sent when an incident is newly created/triggered. * `incident.acknowledge` - Sent when an incident is acknowledged by a user. * `incident.unacknowledge` - Sent when an incident is unacknowledged due to its acknowledgement timing out. * `incident.resolve` - Sent when an incident has been resolved. * `incident.assign` - Sent when an incident has been assigned to another user. Often occurs in concert with an `acknowledge`. * `incident.escalate` - Sent when an incident has been escalated to another user in the same escalation chain. * `incident.delegate` - Sent when an incident has been reassigned to another escalation policy. * `incident.annotate` - Sent when a note is created on an incident.\n",
                "enum": [
                  "incident.trigger",
                  "incident.acknowledge",
                  "incident.unacknowledge",
                  "incident.resolve",
                  "incident.assign",
                  "incident.escalate",
                  "incident.delegate",
                  "incident.annotate"
                ]
              },
              "incident": {
                "$ref": "#/components/schemas/Incident"
              },
              "log_entries": {
                "type": "array",
                "description": "Log Entries that correspond to the action this Webhook is reporting. Includes the channels.",
                "items": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            },
            "example": {
              "id": "bb4fcb00-6324-11e6-b9aa-22000affca53",
              "type": "incident.resolve",
              "triggered_at": "2016-08-15T20:13:28.000Z",
              "log_entries": [
                {
                  "id": "R0FFIOTKIU30MN7XWR99SI0",
                  "type": "resolve_log_entry",
                  "summary": "Resolved by Earline Greenholt",
                  "self": "https://api.pagerduty.com/log_entries/R0FFIOTKIU30MN7XWR99SI0",
                  "html_url": "null",
                  "created_at": "2017-09-22T18:37:29.000Z",
                  "agent": {
                    "id": "PLMUP47",
                    "type": "user_reference",
                    "summary": "Earline Greenholt",
                    "self": "https://api.pagerduty.com/users/PXPGF42",
                    "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                  },
                  "channel": {
                    "type": "slack",
                    "user": {
                      "id": "U60DQ6ZXY",
                      "name": "alisdair"
                    },
                    "team": {
                      "id": "T029K7I8",
                      "domain": "subdomain"
                    },
                    "channel": {
                      "id": "C6981DRAW",
                      "name": "subdomain-ops"
                    }
                  },
                  "service": {
                    "id": "PN49J75",
                    "type": "service_reference",
                    "summary": "Cool Service",
                    "self": "https://api.pagerduty.com/services/PNTDJ30",
                    "html_url": "https://subdomain.pagerduty.com/services/PNTDJ30"
                  },
                  "incident": {
                    "id": "PVO5OB2",
                    "type": "incident_reference",
                    "summary": "The server is on fire.",
                    "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                    "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK"
                  },
                  "teams": [
                    {
                      "id": "PQ9K7I8",
                      "type": "team_reference",
                      "summary": "Engineering",
                      "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                      "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                    }
                  ]
                }
              ],
              "webhook": {
                "type": "webhook",
                "summary": "webhook",
                "self": "https://api.pagerduty.com/webhooks/PPGPXHO",
                "html_url": "null",
                "name": "My Webhook",
                "endpoint_url": "https://example.com",
                "webhook_object": {
                  "id": "PNTDJ30",
                  "type": "service_reference",
                  "summary": "Cool Service",
                  "self": "null",
                  "html_url": "null"
                },
                "config": {
                  "anykey": "anyvalue"
                },
                "outbound_integration": {
                  "id": "PJFWPEP",
                  "type": "outbound_integration_reference",
                  "summary": "Generic Webhook V2",
                  "self": "null",
                  "html_url": "null"
                }
              },
              "incident": {
                "id": "PT4KHLK",
                "type": "incident",
                "summary": "The server is on fire.",
                "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                "incident_number": 1234,
                "created_at": "2015-10-06T21:30:42.000Z",
                "status": "resolved",
                "pending_actions": [
                  {
                    "type": "unacknowledge",
                    "at": "2015-11-10T01:02:52.000Z"
                  },
                  {
                    "type": "resolve",
                    "at": "2015-11-10T04:31:52.000Z"
                  }
                ],
                "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                "service": {
                  "id": "PIJ90N7",
                  "summary": "My Application Service",
                  "self": "https://api.pagerduty.com/services/PIJ90N7",
                  "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7",
                  "name": "My Application Service",
                  "description": "null",
                  "auto_resolve_timeout": 14400,
                  "acknowledgement_timeout": 600,
                  "created_at": "2015-11-06T16:12:51.000Z",
                  "status": "active",
                  "last_incident_timestamp": "null",
                  "integrations": [
                    {
                      "id": "PQ12345",
                      "type": "generic_email_inbound_integration_reference",
                      "summary": "Email Integration",
                      "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                      "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                    }
                  ],
                  "escalation_policy": {
                    "id": "PT20YPA",
                    "type": "escalation_policy_reference",
                    "summary": "Another Escalation Policy",
                    "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                    "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                  },
                  "teams": [
                    {
                      "id": "PQ9K7I8",
                      "type": "team_reference",
                      "summary": "Engineering",
                      "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                      "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                    }
                  ],
                  "incident_urgency_rule": {
                    "type": "use_support_hours",
                    "during_support_hours": {
                      "type": "constant",
                      "urgency": "high"
                    },
                    "outside_support_hours": {
                      "type": "constant",
                      "urgency": "low"
                    }
                  },
                  "support_hours": {
                    "type": "fixed_time_per_day",
                    "time_zone": "America/Lima",
                    "start_time": "09:00:00",
                    "end_time": 61200,
                    "days_of_week": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  },
                  "scheduled_actions": [
                    {
                      "type": "urgency_change",
                      "at": {
                        "type": "named_time",
                        "name": "support_hours_start"
                      },
                      "to_urgency": "high"
                    }
                  ]
                },
                "assignments": [
                  {
                    "at": "2015-11-10T00:31:52.000Z",
                    "assignee": {
                      "id": "PXPGF42",
                      "type": "user_reference",
                      "summary": "Earline Greenholt",
                      "self": "https://api.pagerduty.com/users/PXPGF42",
                      "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                    }
                  }
                ],
                "acknowledgements": [
                  {
                    "at": "2015-11-10T00:32:52.000Z",
                    "acknowledger": {
                      "id": "PXPGF42",
                      "type": "user_reference",
                      "summary": "Earline Greenholt",
                      "self": "https://api.pagerduty.com/users/PXPGF42",
                      "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                    }
                  }
                ],
                "last_status_change_at": "2015-10-06T21:38:23.000Z",
                "last_status_change_by": {
                  "id": "PXPGF42",
                  "type": "user_reference",
                  "summary": "Earline Greenholt",
                  "self": "https://api.pagerduty.com/users/PXPGF42",
                  "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                },
                "first_trigger_log_entry": {
                  "id": "Q02JTSNZWHSEKV",
                  "type": "trigger_log_entry_reference",
                  "summary": "Triggered through the API",
                  "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                  "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                },
                "escalation_policy": {
                  "id": "PT20YPA",
                  "type": "escalation_policy_reference",
                  "summary": "Another Escalation Policy",
                  "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                  "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                },
                "teams": [
                  {
                    "id": "PQ9K7I8",
                    "type": "team_reference",
                    "summary": "Engineering",
                    "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                    "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                  }
                ],
                "urgency": "high"
              }
            }
          }
        ]
      },
      "WebhookObject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "The webhook object (service) that the webhook belongs to.",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "service",
                  "service_reference"
                ]
              }
            }
          }
        ]
      },
      "Webhook": {
        "type": "object",
        "description": "Information about the configured webhook.",
        "readOnly": true,
        "properties": {
          "endpoint_url": {
            "type": "string",
            "format": "url",
            "description": "The url endpoint the webhook payload is sent to."
          },
          "name": {
            "type": "string",
            "description": "The name of the webhook."
          },
          "webhook_object": {
            "$ref": "#/components/schemas/WebhookObject"
          },
          "config": {
            "type": "object",
            "description": "The object that contains webhook configuration values depending on the webhook type specification."
          },
          "outbound_integration": {
            "$ref": "#/components/schemas/OutboundIntegrationReference"
          }
        },
        "example": {
          "id": "PPGPXHO",
          "type": "webhook",
          "summary": "webhook",
          "self": "null",
          "html_url": "null",
          "name": "My Webhook",
          "endpoint_url": "https://example.com",
          "webhook_object": {
            "id": "PNTDJ30",
            "type": "service_reference",
            "summary": "Cool Service",
            "self": "null",
            "html_url": "null"
          },
          "config": {
            "anykey": "anyvalue"
          },
          "outbound_integration": {
            "id": "PJFWPEP",
            "type": "outbound_integration_reference",
            "summary": "Generic Webhook V2",
            "self": "null",
            "html_url": "null"
          }
        }
      },
      "WebhookReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "webhook_reference": "#/models/Reference.yaml",
            "webhook": "#/models/Webhook.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "$ref": "#/components/schemas/Webhook"
          }
        ]
      },
      "OutboundIntegrationReference": {
        "type": "object",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "outbound_integration_reference": "#/models/Reference.yaml"
          }
        },
        "required": [
          "type"
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/Reference"
          }
        ]
      },
      "WebhooksV1Message": {
        "type": "object",
        "description": "A message containing information about a single PagerDuty action.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Uniquely identifies this outgoing webhook message; can be used for idempotency when processing the messages.",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of action being reported by this message.",
            "enum": [
              "incident.trigger",
              "incident.acknowledge",
              "incident.unacknowledge",
              "incident.resolve",
              "incident.assign",
              "incident.escalate",
              "incident.delegate"
            ],
            "readOnly": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "The date/time when the incident changed state.",
            "readOnly": true
          },
          "data": {
            "type": "object",
            "properties": {
              "incident": {
                "$ref": "#/components/schemas/WebhooksV1IncidentData"
              }
            }
          }
        }
      },
      "WebhooksV1IncidentData": {
        "type": "object",
        "description": "The incident details at the time of the state change.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "incident_number": {
            "type": "integer",
            "description": "The number of the incident. This is unique across the account.",
            "readOnly": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "The date/time the incident was first triggered.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "The current status of the incident.",
            "enum": [
              "triggered",
              "acknowledged",
              "resolved"
            ],
            "readOnly": true
          },
          "html_url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          },
          "incident_key": {
            "type": "string",
            "description": "The incident's de-duplication key.",
            "readOnly": true
          },
          "service": {
            "$ref": "#/components/schemas/WebhooksV1Service"
          },
          "assigned_to_user": {
            "$ref": "#/components/schemas/WebhooksV1AssignedToUser"
          },
          "assigned_to": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhooksV1AssignedTo"
            },
            "readOnly": true
          },
          "trigger_summary_data": {
            "type": "object",
            "properties": {
              "subject": {
                "type": "string",
                "readOnly": true
              }
            },
            "readOnly": true
          },
          "trigger_details_html_url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          },
          "last_status_change_on": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The time at which the status of the incident last changed."
          },
          "last_status_change_by": {
            "$ref": "#/components/schemas/WebhooksV1AssignedToUser"
          },
          "number_of_escalations": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of times the incident has been escalated.",
            "readOnly": true
          },
          "urgency": {
            "type": "string",
            "enum": [
              "high",
              "low"
            ],
            "readOnly": true
          }
        }
      },
      "WebhooksV1Service": {
        "type": "object",
        "description": "The service on which the incident occurred.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the service.",
            "readOnly": true
          },
          "html_url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date/time the service was deleted, if it has been removed.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "The description of the service.",
            "readOnly": true
          }
        }
      },
      "WebhooksV1AssignedTo": {
        "type": "object",
        "readOnly": true,
        "properties": {
          "at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the assignment was created."
          },
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhooksV1AssignedToUser"
              },
              {
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "user"
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "WebhooksV1AssignedToUser": {
        "type": "object",
        "description": "The user assigned to the incident.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The user's name.",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address.",
            "readOnly": true
          },
          "html_url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          }
        }
      },
      "WebhooksV1EscalationPolicy": {
        "type": "object",
        "description": "The escalation policy which the incident is following.",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of the service.",
            "readOnly": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date/time the escalation policy was deleted, if it has been removed.",
            "readOnly": true
          }
        }
      }
    }
  },
  "paths": {
    "/api_reference": {
      "description": "Introduction to the PagerDuty REST API Reference.",
      "get": {
        "tags": [
          "API Reference"
        ],
        "operationId": "getAPIReference",
        "summary": "REST API Reference",
        "description": "REST API Reference.",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/abilities": {
      "description": "List your account's abilities.",
      "get": {
        "tags": [
          "Abilities"
        ],
        "operationId": "listAbilities",
        "description": "List all of your account's abilities, by name.",
        "summary": "List abilities",
        "responses": {
          "200": {
            "description": "An array of ability names.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "abilities": {
                          "type": "array",
                          "description": "The set of abilities your account has.",
                          "items": {
                            "type": "string",
                            "description": "A single ability, as a name.",
                            "readOnly": true
                          }
                        }
                      },
                      "required": [
                        "abilities"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "abilities": [
                        "teams",
                        "read_only_users",
                        "service_support_hours",
                        "urgencies"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/abilities/{id}": {
      "description": "Get an ability.",
      "get": {
        "tags": [
          "Abilities"
        ],
        "operationId": "getAbility",
        "description": "Test whether your account has a given ability.",
        "summary": "Test an ability",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The account has the requested ability."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/addons": {
      "description": "List and add add-ons to your account.",
      "get": {
        "tags": [
          "Add-ons"
        ],
        "operationId": "listAddon",
        "description": "List all of the add-ons installed on your account.",
        "summary": "List installed add-ons",
        "parameters": [
          {
            "$ref": "#/components/parameters/include_addon"
          },
          {
            "name": "service_ids[]",
            "in": "query",
            "description": "Filters the results, showing only add-ons for the given services",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters the results, showing only add-ons of the given type",
            "schema": {
              "type": "string",
              "enum": [
                "full_page_addon",
                "incident_show_addon"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of installed add-ons.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "addons": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/AddonReference"
                          }
                        }
                      },
                      "required": [
                        "addons"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "addons": [
                        {
                          "id": "PKX7619",
                          "type": "full_page_addon",
                          "summary": "Internal Status Page",
                          "self": "https://api.pagerduty.com/addons/PKX7619",
                          "html_url": "https://subdomain.pagerduty.com/addons/PKX7619",
                          "name": "Internal Status Page",
                          "src": "https://intranet.example.com/status"
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Add-ons"
        ],
        "operationId": "createAddon",
        "description": "Install an add-on for your account.",
        "summary": "Install an add-on",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "addon": {
                    "$ref": "#/components/schemas/Addon"
                  }
                },
                "required": [
                  "addon"
                ]
              }
            }
          },
          "description": "The add-on to be installed."
        },
        "responses": {
          "201": {
            "description": "The add-on that was installed.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "addon": {
                      "$ref": "#/components/schemas/AddonReference"
                    }
                  },
                  "required": [
                    "addon"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "addon": {
                        "id": "PKX7619",
                        "type": "full_page_addon",
                        "summary": "Internal Status Page",
                        "self": "https://api.pagerduty.com/addons/PKX7619",
                        "html_url": "https://subdomain.pagerduty.com/addons/PKX7619",
                        "name": "Internal Status Page",
                        "src": "https://intranet.example.com/status"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/addons/{id}": {
      "description": "Get an add-on.",
      "get": {
        "tags": [
          "Add-ons"
        ],
        "operationId": "getAddon",
        "description": "Get details about an existing add-on.",
        "summary": "Get an add-on",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested add-on.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "addon": {
                      "$ref": "#/components/schemas/Addon"
                    }
                  },
                  "required": [
                    "addon"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "addon": {
                        "id": "PKX7F81",
                        "type": "incident_show_addon",
                        "name": "Service Runbook",
                        "src": "https://intranet.example.com/runbook.html",
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "service",
                            "summary": "My Application Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Add-ons"
        ],
        "operationId": "deleteAddon",
        "description": "Remove an existing add-on.",
        "summary": "Delete an add-on",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The add-on was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Add-ons"
        ],
        "operationId": "updateAddon",
        "description": "Update an existing add-on.",
        "summary": "Update an add-on",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "addon": {
                    "$ref": "#/components/schemas/AddonReference"
                  }
                },
                "required": [
                  "addon"
                ]
              }
            }
          },
          "description": "The add-on to be updated."
        },
        "responses": {
          "200": {
            "description": "The add-on that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "addon": {
                      "$ref": "#/components/schemas/Addon"
                    }
                  },
                  "required": [
                    "addon"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "addon": {
                        "id": "PKX7F81",
                        "type": "incident_show_addon",
                        "name": "Service Runbook",
                        "src": "https://intranet.example.com/runbook.html",
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "service",
                            "summary": "My Application Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/business_services": {
      "description": "List and create business services.",
      "get": {
        "tags": [
          "Business Services"
        ],
        "operationId": "listBusinessServices",
        "description": "List existing business services.",
        "summary": "List business services",
        "parameters": [
          {
            "name": "optional_total",
            "in": "query",
            "description": "Optional total parameter to display the total number of results.",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to start pagination search results.",
            "schema": {
              "default": 0,
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit on number of results to load",
            "schema": {
              "default": 100,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of services.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "business_services": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BusinessService"
                          }
                        }
                      },
                      "required": [
                        "business_services"
                      ]
                    }
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "business_services": [
                        {
                          "type": "business_service",
                          "self": "https://api.pagerduty.com/business_services/P3U7V58",
                          "html_url": "https://subdomain.pagerduty.com/business_services/P3U7V58",
                          "point_of_contact": "PagerDuty Admin",
                          "name": "stand-alone node",
                          "team": null,
                          "id": "P3U7V58",
                          "description": "Very important business function",
                          "summary": "stand-alone node"
                        },
                        {
                          "type": "business_service",
                          "self": "https://api.pagerduty.com/business_services/P1L1YEE",
                          "html_url": "https://subdomain.pagerduty.com/business_services/P1L1YEE",
                          "point_of_contact": "PagerDuty Admin",
                          "name": "Cross-tier business service",
                          "id": "P1L1YEE",
                          "description": "",
                          "summary": "Cross-tier business service",
                          "team": {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8"
                          }
                        }
                      ],
                      "limit": 100,
                      "offset": 0,
                      "total": null,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Business Services"
        ],
        "operationId": "createBusinessService",
        "description": "Create a new business service.",
        "summary": "Create a business service",
        "parameters": [
          {
            "name": "business_service",
            "in": "query",
            "description": "The business service to be created",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "business_service": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the business service."
                            },
                            "description": {
                              "type": "string",
                              "description": "The description of the business service."
                            },
                            "point_of_contact": {
                              "type": "string",
                              "description": "The owner of the business service."
                            },
                            "team": {
                              "type": "object",
                              "title": "Team",
                              "description": "Reference to the team that owns the business service.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The team ID"
                                }
                              }
                            }
                          }
                        }
                      },
                      "example": {
                        "business_service": {
                          "name": "Self-serve mobile checkout",
                          "description": "Checkout service for our mobile clients",
                          "point_of_contact": "PagerDuty Admin",
                          "team": {
                            "id": "P3ZQXDF"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The business service that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "business_service": {
                      "$ref": "#/components/schemas/BusinessService"
                    }
                  },
                  "required": [
                    "business_service"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "business_service": {
                        "id": "P1L1YEE",
                        "type": "business_service",
                        "self": "https://api.pagerduty.com/business_services/P1L1YEE",
                        "html_url": "https://subdomain.pagerduty.com/business_services/P1L1YEE",
                        "point_of_contact": "PagerDuty Admin",
                        "name": "Self-serve mobile checkout",
                        "description": "Checkout service for our mobile clients.",
                        "summary": "Self-serve mobile checkout",
                        "team": {
                          "id": "P3ZQXDF",
                          "type": "team_reference",
                          "self": "https://api.pagerduty.com/teams/P3ZQXDF"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/business_services/{id}": {
      "description": "Manage a business service.",
      "get": {
        "tags": [
          "Business Services"
        ],
        "operationId": "getBusinessService",
        "description": "Get details about an existing business service.",
        "summary": "Get a business service",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "The service business requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "business_service": {
                      "$ref": "#/components/schemas/BusinessService"
                    }
                  },
                  "required": [
                    "business_service"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "business_service": {
                        "id": "P1L1YEE",
                        "type": "business_service",
                        "self": "https://api.pagerduty.com/busines_services/P1L1YEE",
                        "html_url": "https://subdomain.pagerduty.com/business_services/P1L1YEE",
                        "name": "Cross-tier business service",
                        "description": "Business service affected by multiple teams",
                        "point_of_contact": "PagerDuty Admin",
                        "summary": "Cross-tier business services",
                        "team": {
                          "id": "PQ9K7I8",
                          "type": "team_reference",
                          "self": "https://api.pagerduty.com/teams/PQ9K7I8"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Business Services"
        ],
        "description": "Delete an existing business service. Once the service is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this service.",
        "summary": "Delete a business service",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The business service was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Business Services"
        ],
        "description": "Update an existing business service. NOTE that this endpoint also accepts the PATCH verb.",
        "summary": "Update a business service",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "business_service",
            "in": "query",
            "description": "The business service to be created",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "business_service": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the business service."
                        },
                        "description": {
                          "type": "string",
                          "description": "The description of the business service."
                        },
                        "point_of_contact": {
                          "type": "string",
                          "description": "The owner of the business service."
                        },
                        "team": {
                          "type": "object",
                          "title": "Team",
                          "description": "Reference to the team that owns the business service.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The team ID"
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "business_service": {
                      "name": "Self-serve mobile checkout",
                      "description": "Checkout service for our mobile clients",
                      "point_of_contact": "PagerDuty Admin",
                      "team": {
                        "id": "P3ZQXDF"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The business service that was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "business_service": {
                      "$ref": "#/components/schemas/BusinessService"
                    }
                  },
                  "required": [
                    "business_service"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "business_service": {
                        "id": "P1L1YEE",
                        "type": "business_service",
                        "self": "https://api.pagerduty.com/business_services",
                        "html_url": "https://subdomain.pagerduty.com/business_services",
                        "point_of_contact": "PagerDuty Admin",
                        "name": "Self-serve mobile checkout",
                        "description": "Checkout service for our mobile clients.",
                        "summary": "Self-serve mobile checkout",
                        "team": {
                          "id": "P3ZQXDF",
                          "type": "team_reference",
                          "self": "https://api.pagerduty.com/teams/P3ZQXDF"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/escalation_policies": {
      "description": "List and create escalation policies.",
      "get": {
        "tags": [
          "Escalation Policies"
        ],
        "operationId": "listEscalationPolicies",
        "description": "List all of the existing escalation policies.",
        "summary": "List escalation policies",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filters the results, showing only the escalation policies whose names contain the query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_ids[]",
            "in": "query",
            "description": "Filters the results, showing only escalation policies on which any of the users is a target.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "$ref": "#/components/parameters/team_ids"
          },
          {
            "$ref": "#/components/parameters/include_escalation_policy"
          },
          {
            "$ref": "#/components/parameters/sort_by_escalation_policy"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of escalation policy objects.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "escalation_policies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EscalationPolicy"
                          }
                        }
                      },
                      "required": [
                        "escalation_policies"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "escalation_policies": [
                        {
                          "id": "PANZZEQ",
                          "type": "escalation_policy",
                          "summary": "Engineering Escalation Policy",
                          "on_call_handoff_notifications": "if_has_services",
                          "self": "https://api.pagerduty.com/escalation_policies/PANZZEQ",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PANZZEQ",
                          "name": "Engineering Escalation Policy",
                          "escalation_rules": [
                            {
                              "id": "PANZZEQ",
                              "escalation_delay_in_minutes": 30,
                              "targets": [
                                {
                                  "id": "PEYSGVF",
                                  "summary": "PagerDuty Admin",
                                  "type": "user_reference",
                                  "self": "https://api.pagerduty.com/users/PEYSGVF",
                                  "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                                },
                                {
                                  "id": "PI7DH85",
                                  "summary": "Daily Engineering Rotation",
                                  "type": "schedule_reference",
                                  "self": "https://api.pagerduty.com/schedules/PI7DH85",
                                  "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
                                }
                              ]
                            }
                          ],
                          "services": [
                            {
                              "id": "PIJ90N7",
                              "type": "generic_email_reference",
                              "summary": "My Mail Service",
                              "self": "https://api.pagerduty.com/services/PIJ90N7",
                              "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                            }
                          ],
                          "num_loops": 0,
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ]
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Escalation Policies"
        ],
        "operationId": "createEscalationPolicy",
        "description": "Creates a new escalation policy. At least one escalation rule must be provided.",
        "summary": "Create an escalation policy",
        "parameters": [
          {
            "$ref": "#/components/parameters/optional_from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "escalation_policy": {
                    "$ref": "#/components/schemas/EscalationPolicyReference"
                  }
                },
                "required": [
                  "escalation_policy"
                ]
              }
            }
          },
          "description": "The escalation policy to be created."
        },
        "responses": {
          "201": {
            "description": "The escalation policy that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "escalation_policy": {
                      "$ref": "#/components/schemas/EscalationPolicy"
                    }
                  },
                  "required": [
                    "escalation_policy"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "escalation_policy": {
                        "id": "PT20YPA",
                        "type": "escalation_policy",
                        "summary": "Engineering Escalation Policy",
                        "on_call_handoff_notifications": "if_has_services",
                        "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                        "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA",
                        "name": "Engineering Escalation Policy",
                        "escalation_rules": [
                          {
                            "id": "PT20YPA",
                            "escalation_delay_in_minutes": 22,
                            "targets": [
                              {
                                "id": "PXPGF42",
                                "summary": "Earline Greenholt",
                                "type": "user_reference",
                                "self": "https://api.pagerduty.com/users/PXPGF42",
                                "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                              },
                              {
                                "id": "PI7DH85",
                                "summary": "Daily Engineering Rotation",
                                "type": "schedule_reference",
                                "self": "https://api.pagerduty.com/schedules/PI7DH85",
                                "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
                              }
                            ]
                          }
                        ],
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ],
                        "num_loops": 2,
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/escalation_policies/{id}": {
      "description": "Manage an escalation policy.",
      "get": {
        "tags": [
          "Escalation Policies"
        ],
        "operationId": "getEscalationPolicy",
        "description": "Get information about an existing escalation policy and its rules.",
        "summary": "Get an escalation policy",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include_escalation_policy"
          }
        ],
        "responses": {
          "200": {
            "description": "The escalation policy object.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "escalation_policy": {
                      "$ref": "#/components/schemas/EscalationPolicy"
                    }
                  },
                  "required": [
                    "escalation_policy"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "escalation_policy": {
                        "id": "PT20YPA",
                        "type": "escalation_policy",
                        "summary": "Another Escalation Policy",
                        "on_call_handoff_notifications": "if_has_services",
                        "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                        "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA",
                        "name": "Another Escalation Policy",
                        "escalation_rules": [
                          {
                            "id": "PGHDV41",
                            "escalation_delay_in_minutes": 30,
                            "targets": [
                              {
                                "id": "PAM4FGS",
                                "summary": "Kyler Kuhn",
                                "type": "user_reference",
                                "self": "https://api.pagerduty.com/users/PAM4FGS",
                                "html_url": "https://subdomain.pagerduty.com/users/PAM4FGS"
                              },
                              {
                                "id": "PI7DH85",
                                "summary": "Daily Engineering Rotation",
                                "type": "schedule_reference",
                                "self": "https://api.pagerduty.com/schedules/PI7DH85",
                                "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
                              }
                            ]
                          }
                        ],
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ],
                        "num_loops": 2,
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "description": "This is yet another escalation policy"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Escalation Policies"
        ],
        "operationId": "deleteEscalationPolicy",
        "description": "Deletes an existing escalation policy and rules. The escalation policy must not be in use by any services.",
        "summary": "Delete an escalation policy",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The escalation policy was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Escalation Policies"
        ],
        "operationId": "updateEscalationPolicy",
        "description": "Updates an existing escalation policy and rules.",
        "summary": "Update an escalation policy",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "escalation_policy": {
                    "$ref": "#/components/schemas/EscalationPolicyReference"
                  }
                },
                "required": [
                  "escalation_policy"
                ]
              }
            }
          },
          "description": "The escalation policy to be updated."
        },
        "responses": {
          "200": {
            "description": "The escalation policy that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "escalation_policy": {
                      "$ref": "#/components/schemas/EscalationPolicy"
                    }
                  },
                  "required": [
                    "escalation_policy"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "escalation_policy": {
                        "id": "PT20YPA",
                        "type": "escalation_policy",
                        "summary": "Another Escalation Policy",
                        "on_call_handoff_notifications": "if_has_services",
                        "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                        "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA",
                        "name": "Another Escalation Policy",
                        "escalation_rules": [
                          {
                            "id": "PGHDV41",
                            "escalation_delay_in_minutes": 30,
                            "targets": [
                              {
                                "id": "PAM4FGS",
                                "summary": "Kyler Kuhn",
                                "type": "user_reference",
                                "self": "https://api.pagerduty.com/users/PAM4FGS",
                                "html_url": "https://subdomain.pagerduty.com/users/PAM4FGS"
                              },
                              {
                                "id": "PI7DH85",
                                "summary": "Daily Engineering Rotation",
                                "type": "schedule_reference",
                                "self": "https://api.pagerduty.com/schedules/PI7DH85",
                                "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
                              }
                            ]
                          }
                        ],
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ],
                        "num_loops": 2,
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "description": "This is yet another escalation policy"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/extensions": {
      "description": "List and create extensions.",
      "get": {
        "tags": [
          "Extensions"
        ],
        "operationId": "listExtensions",
        "description": "List existing extensions.",
        "summary": "List extensions",
        "parameters": [
          {
            "name": "extension_object_id",
            "description": "The id of the extension object you want to filter by.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filters the result, showing only the extensions whose name matches the query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extension_schema_id",
            "in": "query",
            "description": "Filter the extensions by extension vendor id.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "extension_objects",
                "extension_schemas"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of extensions.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "extensions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Extension"
                          }
                        }
                      },
                      "required": [
                        "extensions"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "extensions": [
                        {
                          "id": "PPGPXHO",
                          "self": "https://api.pagerduty.com/extensions/PPGPXHO",
                          "endpoint_url": "https://example.com/recieve_a_pagerduty_webhook",
                          "name": "My Webhook",
                          "summary": "My Webhook",
                          "type": "extension",
                          "extension_schema": {
                            "id": "PJFWPEP",
                            "type": "extension_schema_reference",
                            "summary": "Generic Webhook",
                            "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP"
                          },
                          "extension_objects": [
                            {
                              "id": "PIJ90N7",
                              "type": "service_reference",
                              "summary": "My Application Service",
                              "self": "https://api.pagerduty.com/services/PIJ90N7",
                              "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                            }
                          ]
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Extensions"
        ],
        "operationId": "createExtension",
        "description": "Create a new extension.",
        "summary": "Create an extension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "extension": {
                    "$ref": "#/components/schemas/ExtensionReference"
                  }
                },
                "required": [
                  "extension"
                ]
              }
            }
          },
          "description": "The extension to be created"
        },
        "responses": {
          "201": {
            "description": "The extension that was created",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extension": {
                      "$ref": "#/components/schemas/Extension"
                    }
                  },
                  "required": [
                    "extension"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "extension": {
                        "id": "PPGPXHO",
                        "self": "https://api.pagerduty.com/extensions/PPGPXHO",
                        "endpoint_url": "https://example.com/recieve_a_pagerduty_webhook",
                        "name": "My Webhook",
                        "summary": "My Webhook",
                        "type": "extension",
                        "extension_schema": {
                          "id": "PJFWPEP",
                          "type": "extension_schema_reference",
                          "summary": "Generic Webhook",
                          "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP"
                        },
                        "extension_objects": [
                          {
                            "id": "PIJ90N7",
                            "type": "service_reference",
                            "summary": "My Application Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "callbacks": {
          "webhookV2": {
            "endpoint_url": {
              "post": {
                "tags": [
                  "Webhooks V2"
                ],
                "operationId": "webhookV2",
                "description": "Receive webhook indicating incident state has changed.",
                "summary": "Receive webhook",
                "security": [],
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this if it successfuly received the webhook."
                  }
                },
                "requestBody": {
                  "description": "Webhook.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "messages": {
                            "type": "array",
                            "description": "An array of webhook messages.",
                            "items": {
                              "$ref": "#/components/schemas/WebhookIncidentAction"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "webhookV1": {
            "endpoint_url": {
              "post": {
                "tags": [
                  "Webhooks V1"
                ],
                "operationId": "webhookV1",
                "description": "Receive webhook indicating incident state has changed.",
                "summary": "Receive webhook",
                "security": [],
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this if it successfuly received the webhook."
                  }
                },
                "requestBody": {
                  "description": "Webhook.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhooksV1Message"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/extensions/{id}": {
      "description": "Manage an extension.",
      "get": {
        "tags": [
          "Extensions"
        ],
        "operationId": "getExtension",
        "description": "Get details about an existing extension.",
        "summary": "Get an extension",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "extension_schemas",
                "extension_objects"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The extension that was requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extension": {
                      "$ref": "#/components/schemas/Extension"
                    }
                  },
                  "required": [
                    "extension"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "extension": {
                        "id": "PPGPXHO",
                        "self": "https://api.pagerduty.com/extensions/PPGPXHO",
                        "endpoint_url": "https://example.com/recieve_a_pagerduty_webhook",
                        "name": "My Webhook",
                        "summary": "My Webhook",
                        "type": "extension",
                        "extension_schema": {
                          "id": "PJFWPEP",
                          "type": "extension_schema_reference",
                          "summary": "Generic Webhook",
                          "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP"
                        },
                        "extension_objects": [
                          {
                            "id": "PIJ90N7",
                            "type": "service_reference",
                            "summary": "My Application Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Extensions"
        ],
        "operationId": "deleteExtension",
        "description": "Delete an existing extension. Once the extension is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this extension.",
        "summary": "Delete an extension",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The extension was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "tags": [
          "Extensions"
        ],
        "operationId": "updateExtension",
        "description": "Update an existing extension.",
        "summary": "Update an extension",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "extension": {
                    "$ref": "#/components/schemas/ExtensionReference"
                  }
                },
                "required": [
                  "extension"
                ]
              }
            }
          },
          "description": "The extension to be updated."
        },
        "responses": {
          "200": {
            "description": "The extension that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extension": {
                      "$ref": "#/components/schemas/Extension"
                    }
                  },
                  "required": [
                    "extension"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "extension": {
                        "id": "PPGPXHO",
                        "self": "https://api.pagerduty.com/extensions/PPGPXHO",
                        "endpoint_url": "https://example.com/recieve_a_pagerduty_webhook",
                        "name": "My Webhook",
                        "summary": "My Webhook",
                        "type": "extension",
                        "extension_schema": {
                          "id": "PJFWPEP",
                          "type": "extension_schema_reference",
                          "summary": "Generic Webhook",
                          "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP"
                        },
                        "extension_objects": [
                          {
                            "id": "PIJ90N7",
                            "type": "service_reference",
                            "summary": "My Application Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/extension_schemas": {
      "description": "List extension schemas.",
      "get": {
        "tags": [
          "Extension Schemas"
        ],
        "operationId": "listExtensionSchemas",
        "description": "List all extension schemas.",
        "summary": "List extension schemas",
        "responses": {
          "200": {
            "description": "A paginated array of extension schemas.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "extension_schemas": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/ExtensionSchema"
                          }
                        }
                      },
                      "required": [
                        "extension_schemas"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "extension_schemas": [
                        {
                          "id": "PJFWPEP",
                          "type": "extension_schema",
                          "summary": "Generic Webhook",
                          "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP",
                          "description": "Long description here",
                          "guide_url": "v2.developer.pagerduty.com",
                          "icon_url": "https://extension.com/extension.png",
                          "key": "generic_webhook",
                          "label": "Generic Webhook",
                          "logo_url": "https://extension.com/logo.png",
                          "send_types": [
                            "trigger",
                            "acknowledge",
                            "resolve",
                            "delegate",
                            "escalate",
                            "unacknowledge",
                            "assign"
                          ],
                          "url": ""
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/extension_schemas/{id}": {
      "description": "Get details about one specific extension vendor.",
      "get": {
        "tags": [
          "Extension Schemas"
        ],
        "operationId": "getExtensionSchema",
        "description": "Get details about one specific extension vendor.",
        "summary": "Get an extension vendor",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "The extension vendor requested",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "extension_schema": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExtensionSchema"
                      }
                    }
                  },
                  "required": [
                    "extension_schema"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "extension_schema": {
                        "id": "PJFWPEP",
                        "type": "extension_schema",
                        "summary": "Generic Webhook",
                        "self": "https://api.pagerduty.com/extension_schemas/PJFWPEP",
                        "description": "Long description here",
                        "guide_url": "v2.developer.pagerduty.com",
                        "icon_url": "https://extension.com/extension.png",
                        "key": "generic_webhook",
                        "label": "Generic Webhook",
                        "logo_url": "https://extension.com/logo.png",
                        "send_types": [
                          "trigger",
                          "acknowledge",
                          "resolve",
                          "delegate",
                          "escalate",
                          "unacknowledge",
                          "assign"
                        ],
                        "url": ""
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents": {
      "description": "List and update incidents.",
      "get": {
        "tags": [
          "Incidents"
        ],
        "operationId": "listIncidents",
        "description": "List existing incidents.",
        "summary": "List incidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/date_range"
          },
          {
            "name": "statuses[]",
            "in": "query",
            "description": "Return only incidents with the given statuses. (More status codes may be introduced in the future.)",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "triggered",
                "acknowledged",
                "resolved"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/incident_key"
          },
          {
            "$ref": "#/components/parameters/incident_services"
          },
          {
            "$ref": "#/components/parameters/team_ids"
          },
          {
            "$ref": "#/components/parameters/incident_assigned_to_user"
          },
          {
            "$ref": "#/components/parameters/incident_urgencies"
          },
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Used to specify both the field you wish to sort the results on (incident_number/created_at/resolved_at/urgency), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending. The account must have the `urgencies` ability to sort by the urgency.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "maxItems": 2,
              "uniqueItems": true
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "users",
                "services",
                "first_trigger_log_entries",
                "escalation_policies",
                "teams",
                "assignees",
                "acknowledgers",
                "priorities",
                "conference_bridge"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of incidents.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "incidents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Incident"
                          }
                        }
                      },
                      "required": [
                        "incidents"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incidents": [
                        {
                          "id": "PT4KHLK",
                          "type": "incident",
                          "summary": "[#1234] The server is on fire.",
                          "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                          "incident_number": 1234,
                          "created_at": "2015-10-06T21:30:42.000Z",
                          "status": "resolved",
                          "title": "The server is on fire.",
                          "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                          "service": {
                            "id": "PIJ90N7",
                            "type": "generic_email",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          },
                          "priority": {
                            "id": "P53ZZH5",
                            "type": "priority_reference",
                            "summary": "P2",
                            "self": "https://api.pagerduty.com/priorities/P53ZZH5"
                          },
                          "assigned_via": "escalation_policy",
                          "assignments": [],
                          "acknowledgements": [],
                          "last_status_change_at": "2015-10-06T21:38:23.000Z",
                          "last_status_change_by": {
                            "id": "PXPGF42",
                            "type": "user_reference",
                            "summary": "Earline Greenholt",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          },
                          "first_trigger_log_entry": {
                            "id": "Q02JTSNZWHSEKV",
                            "type": "trigger_log_entry_reference",
                            "summary": "Triggered through the API",
                            "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                            "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                          },
                          "escalation_policy": {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Another Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          },
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ],
                          "urgency": "high",
                          "conference_bridge": {
                            "conference_number": "+1-415-555-1212,,,,1234#",
                            "conference_url": "https://example.com/acb-123"
                          }
                        }
                      ],
                      "limit": 1,
                      "offset": 0,
                      "more": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Incidents"
        ],
        "operationId": "updateIncidents",
        "description": "Acknowledge, resolve, escalate or reassign one or more incidents.",
        "summary": "Manage incidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "incidents": {
                    "type": "array",
                    "description": "An array of incidents, including the parameters to update.",
                    "items": {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The id of the incident to update."
                        },
                        "type": {
                          "type": "string",
                          "description": "The incident type.",
                          "enum": [
                            "incident",
                            "incident_reference"
                          ]
                        },
                        "status": {
                          "type": "string",
                          "description": "The new status of the incident.",
                          "enum": [
                            "resolved",
                            "acknowledged"
                          ]
                        },
                        "resolution": {
                          "type": "string",
                          "description": "The resolution for this incident if status is set to resolved."
                        },
                        "title": {
                          "type": "string",
                          "description": "A succinct description of the nature, symptoms, cause, or effect of the incident."
                        },
                        "priority": {
                          "$ref": "#/components/schemas/PriorityReference"
                        },
                        "escalation_level": {
                          "type": "integer",
                          "description": "Escalate the incident to this level in the escalation policy."
                        },
                        "assignments": {
                          "type": "array",
                          "description": "Assign the incident to these assignees.",
                          "items": {
                            "properties": {
                              "assignee": {
                                "$ref": "#/components/schemas/UserReference"
                              }
                            }
                          }
                        },
                        "escalation_policy": {
                          "$ref": "#/components/schemas/EscalationPolicyReference"
                        },
                        "conference_bridge": {
                          "$ref": "#/components/schemas/ConferenceBridge"
                        }
                      },
                      "required": [
                        "id",
                        "type"
                      ]
                    }
                  }
                },
                "required": [
                  "incidents"
                ],
                "example": {
                  "incidents": [
                    {
                      "id": "PT4KHLK",
                      "type": "incident_reference",
                      "status": "acknowledged"
                    },
                    {
                      "id": "PQMF62U",
                      "type": "incident_reference",
                      "priority": {
                        "id": "P53ZZH5",
                        "type": "priority_reference"
                      }
                    },
                    {
                      "id": "PPVZH9X",
                      "type": "incident_reference",
                      "status": "resolved"
                    },
                    {
                      "id": "P8JOGX7",
                      "type": "incident_reference",
                      "assignments": [
                        {
                          "assignee": {
                            "id": "PXPGF42",
                            "type": "user_reference"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All of the updates succeeded.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "incidents": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Incident"
                          }
                        }
                      },
                      "required": [
                        "incidents"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incidents": [
                        {
                          "id": "PT4KHLK",
                          "type": "incident",
                          "summary": "[#1234] The server is on fire.",
                          "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                          "incident_number": 1234,
                          "created_at": "2015-10-06T21:30:42.000Z",
                          "status": "resolved",
                          "title": "The server is on fire.",
                          "alert_counts": {
                            "all": 2,
                            "triggered": 0,
                            "resolved": 2
                          },
                          "pending_actions": [
                            {
                              "type": "unacknowledge",
                              "at": "2015-11-10T01:02:52.000Z"
                            },
                            {
                              "type": "resolve",
                              "at": "2015-11-10T04:31:52.000Z"
                            }
                          ],
                          "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                          "service": {
                            "id": "PIJ90N7",
                            "type": "generic_email",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          },
                          "assigned_via": "escalation_policy",
                          "assignments": [
                            {
                              "at": "2015-11-10T00:31:52.000Z",
                              "assignee": {
                                "id": "PXPGF42",
                                "type": "user_reference",
                                "summary": "Earline Greenholt",
                                "self": "https://api.pagerduty.com/users/PXPGF42",
                                "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                              }
                            }
                          ],
                          "acknowledgements": [
                            {
                              "at": "2015-11-10T00:32:52.000Z",
                              "acknowledger": {
                                "id": "PXPGF42",
                                "type": "user_reference",
                                "summary": "Earline Greenholt",
                                "self": "https://api.pagerduty.com/users/PXPGF42",
                                "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                              }
                            }
                          ],
                          "last_status_change_at": "2015-10-06T21:38:23.000Z",
                          "last_status_change_by": {
                            "id": "PXPGF42",
                            "type": "user_reference",
                            "summary": "Earline Greenholt",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          },
                          "first_trigger_log_entry": {
                            "id": "Q02JTSNZWHSEKV",
                            "type": "trigger_log_entry_reference",
                            "summary": "Triggered through the API",
                            "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                            "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                          },
                          "escalation_policy": {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Another Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          },
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ],
                          "urgency": "high"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Incidents"
        ],
        "operationId": "createIncident",
        "description": "Create an incident synchronously without a corresponding event from a monitoring service.",
        "summary": "Create an Incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "incident": {
                    "type": "object",
                    "description": "Details of the incident to be created.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "incident"
                        ]
                      },
                      "title": {
                        "type": "string",
                        "description": "A succinct description of the nature, symptoms, cause, or effect of the incident."
                      },
                      "service": {
                        "$ref": "#/components/schemas/ServiceReference"
                      },
                      "priority": {
                        "$ref": "#/components/schemas/PriorityReference"
                      },
                      "urgency": {
                        "type": "string",
                        "description": "The urgency of the incident",
                        "enum": [
                          "high",
                          "low"
                        ]
                      },
                      "body": {
                        "$ref": "#/components/schemas/IncidentBody"
                      },
                      "incident_key": {
                        "type": "string",
                        "description": "A string which identifies the incident. Sending subsequent requests referencing the same service and with the same incident_key will result in those requests being rejected if an open incident matches that incident_key."
                      },
                      "assignments": {
                        "type": "array",
                        "description": "Assign the incident to these assignees. Cannot be specified if an escalation policy is given.",
                        "items": {
                          "properties": {
                            "assignee": {
                              "$ref": "#/components/schemas/UserReference"
                            }
                          }
                        }
                      },
                      "escalation_policy": {
                        "$ref": "#/components/schemas/EscalationPolicyReference"
                      },
                      "conference_bridge": {
                        "$ref": "#/components/schemas/ConferenceBridge"
                      }
                    },
                    "required": [
                      "type",
                      "title",
                      "service"
                    ]
                  }
                },
                "required": [
                  "incident"
                ],
                "example": {
                  "incident": {
                    "type": "incident",
                    "title": "The server is on fire.",
                    "service": {
                      "id": "PWIXJZS",
                      "type": "service_reference"
                    },
                    "priority": {
                      "id": "P53ZZH5",
                      "type": "priority_reference"
                    },
                    "urgency": "high",
                    "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                    "body": {
                      "type": "incident_body",
                      "details": "A disk is getting full on this machine. You should investigate what is causing the disk to fill, and ensure that there is an automated process in place for ensuring data is rotated (eg. logs should have logrotate around them). If data is expected to stay on this disk forever, you should start planning to scale up to a larger disk."
                    },
                    "escalation_policy": {
                      "id": "PT20YPA",
                      "type": "escalation_policy_reference"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The incident object created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incident": {
                      "$ref": "#/components/schemas/Incident"
                    }
                  },
                  "required": [
                    "incident"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incident": {
                        "id": "PT4KHLK",
                        "type": "incident",
                        "title": "The server is on fire.",
                        "summary": "[#1234] The server is on fire.",
                        "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                        "incident_number": 1234,
                        "created_at": "2015-10-06T21:30:42.000Z",
                        "status": "triggered",
                        "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                        "service": {
                          "id": "PWIXJZS",
                          "type": "generic_email",
                          "summary": "My Mail Service",
                          "self": "https://api.pagerduty.com/services/PWIXJZS",
                          "html_url": "https://subdomain.pagerduty.com/services/PWIXJZS"
                        },
                        "priority": {
                          "id": "P53ZZH5",
                          "type": "priority_reference",
                          "summary": "P2",
                          "self": "https://api.pagerduty.com/priorities/P53ZZH5"
                        },
                        "assigned_via": "escalation_policy",
                        "assignments": [
                          {
                            "at": "2015-11-10T00:31:52.000Z",
                            "assignee": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "last_status_change_at": "2015-10-06T21:38:23.000Z",
                        "last_status_change_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        },
                        "first_trigger_log_entry": {
                          "id": "Q02JTSNZWHSEKV",
                          "type": "trigger_log_entry_reference",
                          "summary": "Triggered through the API",
                          "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                        },
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/count": {
      "description": "Get a count of incidents matching a set of criteria such as service, status, and time. Counts may be fetched per status."
    },
    "/incidents/{id}/merge": {
      "description": "\"Merge\" an array of incidents into a target incident. After the merge is performed the target incident will contain the source incidents's alerts, and the source incidents will be resolved.",
      "put": {
        "tags": [
          "Incidents"
        ],
        "operationId": "mergeIncidents",
        "description": "Merge a list of source incidents into this incident.",
        "summary": "Merge incidents",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_incidents": {
                    "type": "array",
                    "description": "The source incidents that will be merged into the target incident and resolved.",
                    "items": {
                      "$ref": "#/components/schemas/IncidentReference"
                    }
                  }
                },
                "required": [
                  "source_incidents"
                ],
                "example": {
                  "source_incidents": [
                    {
                      "id": "P8JOGX7",
                      "type": "incident_reference"
                    },
                    {
                      "id": "PPVZH9X",
                      "type": "incident_reference"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The target incident, which now contains all the alerts from the source incident.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incident": {
                      "$ref": "#/components/schemas/IncidentReference"
                    }
                  },
                  "required": [
                    "incident"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incident": {
                        "id": "PT4KHLK",
                        "type": "incident",
                        "summary": "[#1234] The server is on fire.",
                        "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}": {
      "description": "Get an incident.",
      "get": {
        "tags": [
          "Incidents"
        ],
        "operationId": "getIncident",
        "description": "Show detailed information about an incident. Accepts either an incident id, or an incident number.",
        "summary": "Get an incident",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Either the id or number of the incident to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The incident requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incident": {
                      "$ref": "#/components/schemas/Incident"
                    }
                  },
                  "required": [
                    "incident"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incident": {
                        "id": "PT4KHLK",
                        "type": "incident",
                        "summary": "[#1234] The server is on fire.",
                        "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                        "incident_number": 1234,
                        "created_at": "2015-10-06T21:30:42.000Z",
                        "status": "acknowledged",
                        "title": "The server is on fire.",
                        "alert_counts": {
                          "all": 2,
                          "triggered": 1,
                          "resolved": 1
                        },
                        "pending_actions": [
                          {
                            "type": "unacknowledge",
                            "at": "2015-11-10T01:02:52.000Z"
                          },
                          {
                            "type": "resolve",
                            "at": "2015-11-10T04:31:52.000Z"
                          }
                        ],
                        "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                        "service": {
                          "id": "PIJ90N7",
                          "type": "generic_email_reference",
                          "summary": "My Mail Service",
                          "self": "https://api.pagerduty.com/services/PIJ90N7",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                        },
                        "priority": {
                          "id": "P53ZZH5",
                          "type": "priority_reference",
                          "summary": "P2",
                          "self": "https://api.pagerduty.com/priorities/P53ZZH5"
                        },
                        "assigned_via": "escalation_policy",
                        "assignments": [
                          {
                            "at": "2015-11-10T00:31:52.000Z",
                            "assignee": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "acknowledgements": [
                          {
                            "at": "2015-11-10T00:32:52.000Z",
                            "acknowledger": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "last_status_change_at": "2015-10-06T21:38:23.000Z",
                        "last_status_change_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        },
                        "first_trigger_log_entry": {
                          "id": "Q02JTSNZWHSEKV",
                          "type": "trigger_log_entry_reference",
                          "summary": "Triggered through the API",
                          "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                        },
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Incidents"
        ],
        "operationId": "updateIncident",
        "description": "Acknowledge, resolve, escalate or reassign an incident.",
        "summary": "Update an incident",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the incident to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "incident": {
                    "type": "object",
                    "description": "The parameters of the incident to update.",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The incident type.",
                        "enum": [
                          "incident",
                          "incident_reference"
                        ]
                      },
                      "status": {
                        "type": "string",
                        "description": "The new status of the incident.",
                        "enum": [
                          "resolved",
                          "acknowledged"
                        ]
                      },
                      "priority": {
                        "$ref": "#/components/schemas/PriorityReference"
                      },
                      "resolution": {
                        "type": "string",
                        "description": "The resolution for this incident if status is set to resolved."
                      },
                      "title": {
                        "type": "string",
                        "description": "The new title of the incident."
                      },
                      "escalation_level": {
                        "type": "integer",
                        "description": "Escalate the incident to this level in the escalation policy."
                      },
                      "assignments": {
                        "type": "array",
                        "description": "Assign the incident to these assignees.",
                        "items": {
                          "properties": {
                            "assignee": {
                              "$ref": "#/components/schemas/UserReference"
                            }
                          }
                        }
                      },
                      "escalation_policy": {
                        "$ref": "#/components/schemas/EscalationPolicyReference"
                      },
                      "urgency": {
                        "type": "string",
                        "description": "The urgency of the incident.",
                        "enum": [
                          "high",
                          "low"
                        ]
                      },
                      "conference_bridge": {
                        "$ref": "#/components/schemas/ConferenceBridge"
                      }
                    },
                    "required": [
                      "type"
                    ]
                  }
                },
                "required": [
                  "incident"
                ],
                "example": {
                  "incident": {
                    "type": "incident_reference",
                    "status": "acknowledged"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The incident was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "incident": {
                          "$ref": "#/components/schemas/Incident"
                        }
                      },
                      "required": [
                        "incident"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incident": {
                        "id": "PT4KHLK",
                        "type": "incident",
                        "summary": "[#1234] The server is on fire.",
                        "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                        "incident_number": 1234,
                        "created_at": "2015-10-06T21:30:42.000Z",
                        "status": "resolved",
                        "title": "The server is on fire.",
                        "pending_actions": [
                          {
                            "type": "unacknowledge",
                            "at": "2015-11-10T01:02:52.000Z"
                          },
                          {
                            "type": "resolve",
                            "at": "2015-11-10T04:31:52.000Z"
                          }
                        ],
                        "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                        "service": {
                          "id": "PIJ90N7",
                          "type": "generic_email_reference",
                          "summary": "My Mail Service",
                          "self": "https://api.pagerduty.com/services/PIJ90N7",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                        },
                        "priority": {
                          "id": "P53ZZH5",
                          "type": "priority_reference",
                          "summary": "P2",
                          "self": "https://api.pagerduty.com/priorities/P53ZZH5"
                        },
                        "assigned_via": "escalation_policy",
                        "assignments": [
                          {
                            "at": "2015-11-10T00:31:52.000Z",
                            "assignee": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "acknowledgements": [
                          {
                            "at": "2015-11-10T00:32:52.000Z",
                            "acknowledger": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "last_status_change_at": "2015-10-06T21:38:23.000Z",
                        "last_status_change_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        },
                        "first_trigger_log_entry": {
                          "id": "Q02JTSNZWHSEKV",
                          "type": "trigger_log_entry_reference",
                          "summary": "Triggered through the API",
                          "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                        },
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/alerts": {
      "description": "List and update alerts.",
      "get": {
        "tags": [
          "Incidents"
        ],
        "operationId": "listIncidentAlerts",
        "description": "List alerts for the specified incident.",
        "summary": "List alerts for an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "statuses[]",
            "in": "query",
            "description": "Return only alerts with the given statuses. (More status codes may be introduced in the future.)",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "triggered",
                "resolved"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/alert_key"
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "created_at",
                  "resolved_at",
                  "created_at:asc",
                  "created_at:desc",
                  "resolved_at:asc",
                  "resolved_at:desc"
                ]
              },
              "maxItems": 2,
              "uniqueItems": true
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "services",
                  "first_trigger_log_entries",
                  "incidents"
                ]
              },
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of the incident's alerts.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "alerts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Alert"
                          }
                        }
                      },
                      "required": [
                        "alerts"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "alerts": [
                        {
                          "id": "PT4KHLK",
                          "type": "alert",
                          "summary": "The server is on fire.",
                          "self": "https://api.pagerduty.com/incidents/PT4KHLK/alerts/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/alerts/PXPGF42",
                          "created_at": "2015-10-06T21:30:42.000Z",
                          "status": "resolved",
                          "alert_key": "baf7cf21b1da41b4b0221008339ff357",
                          "service": {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          },
                          "body": {
                            "type": "alert_body",
                            "contexts": [
                              {
                                "type": "link"
                              }
                            ],
                            "details": {
                              "customKey": "Server is on fire!",
                              "customKey2": "Other stuff!"
                            }
                          },
                          "incident": {
                            "id": "PT4KHLK",
                            "type": "incident_reference"
                          },
                          "suppressed": false,
                          "severity": "critical",
                          "integration": {
                            "id": "PQ12345",
                            "type": "generic_email_inbound_integration_reference",
                            "summary": "Email Integration",
                            "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                          }
                        }
                      ],
                      "limit": 1,
                      "offset": 0,
                      "more": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Incidents"
        ],
        "operationId": "updateIncidentAlerts",
        "description": "Resolve multiple alerts or associate them with different incidents.",
        "summary": "Manage alerts",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alerts": {
                    "type": "array",
                    "description": "An array of alerts, including the parameters to update for each alert.",
                    "items": {
                      "$ref": "#/components/schemas/AlertReference"
                    }
                  }
                },
                "required": [
                  "alerts"
                ],
                "example": {
                  "alerts": [
                    {
                      "id": "PPVZH9X",
                      "type": "alert_reference",
                      "status": "resolved"
                    },
                    {
                      "id": "P8JOGX7",
                      "type": "alert_reference",
                      "incident": {
                        "id": "PPVZH9X",
                        "type": "incident_reference"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All of the updates succeeded.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "alerts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Alert"
                          }
                        }
                      },
                      "required": [
                        "alerts"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "alerts": [
                        {
                          "id": "PT4KHLK",
                          "type": "alert",
                          "summary": "The server is on fire.",
                          "self": "https://api.pagerduty.com/incidents/PT4KHLK/alerts/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/alerts/PXPGF42",
                          "created_at": "2015-10-06T21:30:42.000Z",
                          "status": "resolved",
                          "alert_key": "baf7cf21b1da41b4b0221008339ff357",
                          "service": {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          },
                          "body": {
                            "type": "alert_body",
                            "contexts": [
                              {
                                "type": "link"
                              }
                            ],
                            "details": {
                              "customKey": "Server is on fire!",
                              "customKey2": "Other stuff!"
                            }
                          },
                          "incident": {
                            "id": "PPVZH9X",
                            "type": "incident_reference"
                          },
                          "suppressed": false,
                          "severity": "critical"
                        }
                      ],
                      "limit": 1,
                      "offset": 0,
                      "more": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/alerts/{alert_id}": {
      "description": "Get an alert.",
      "get": {
        "tags": [
          "Incidents"
        ],
        "operationId": "getIncidentAlert",
        "description": "Show detailed information about an alert. Accepts an alert id.",
        "summary": "Get an alert",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "alert_id",
            "in": "path",
            "description": "The id of the alert to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The alert requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alert": {
                      "$ref": "#/components/schemas/Alert"
                    }
                  },
                  "required": [
                    "alert"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "alert": {
                        "id": "PT4KHLK",
                        "type": "alert",
                        "summary": "The server is on fire.",
                        "self": "https://api.pagerduty.com/incident/PT4KHLX/alerts/PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/alerts/PT4KHLK",
                        "created_at": "2015-10-06T21:30:42.000Z",
                        "status": "resolved",
                        "alert_key": "baf7cf21b1da41b4b0221008339ff357",
                        "service": {
                          "id": "PIJ90N7",
                          "type": "generic_email_reference",
                          "summary": "My Mail Service",
                          "self": "https://api.pagerduty.com/services/PIJ90N7",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                        },
                        "incident": {
                          "id": "PT4KHLX",
                          "type": "incident_reference",
                          "summary": "[#1234] The server is on fire.",
                          "self": "https://api.pagerduty.com/incidents/PT4KHLX",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLX"
                        },
                        "suppressed": false,
                        "severity": "critical",
                        "integration": {
                          "id": "PQ12345",
                          "type": "generic_email_inbound_integration_reference",
                          "summary": "Email Integration",
                          "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Incidents"
        ],
        "operationId": "updateIncidentAlert",
        "description": "Resolve an alert or associate an alert with a new parent incident.",
        "summary": "Update an alert",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "alert_id",
            "in": "path",
            "description": "The id of the alert to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "alert": {
                    "$ref": "#/components/schemas/AlertReference"
                  }
                },
                "required": [
                  "alert"
                ]
              }
            }
          },
          "description": "The parameters of the alert to update."
        },
        "responses": {
          "200": {
            "description": "The alert that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "alert": {
                      "$ref": "#/components/schemas/AlertReference"
                    }
                  },
                  "required": [
                    "alert"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/log_entries": {
      "description": "List incident log entries for an incident.",
      "get": {
        "tags": [
          "Incidents"
        ],
        "operationId": "listIncidentLogEntries",
        "description": "List log entries for the specified incident.",
        "summary": "List log entries for an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "$ref": "#/components/parameters/log_entry_is_overview"
          },
          {
            "$ref": "#/components/parameters/include_log_entry"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of the incident's log entries.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "log_entries": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LogEntry"
                          }
                        }
                      },
                      "required": [
                        "log_entries"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "log_entries": [
                        {
                          "id": "Q02JTSNZWHSEKV",
                          "type": "trigger_log_entry",
                          "summary": "Triggered through the API",
                          "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV",
                          "created_at": "2015-11-07T00:14:20.000Z",
                          "agent": {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          },
                          "channel": {
                            "type": "api"
                          },
                          "incident": {
                            "id": "PT4KHLK",
                            "type": "incident_reference",
                            "summary": "[#1234] The server is on fire.",
                            "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                            "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK"
                          },
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ],
                          "contexts": [],
                          "event_details": {
                            "description": "Tasks::SFDCValidator - PD_Data__c - duplicates"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/notes": {
      "description": "List and create incident notes.",
      "get": {
        "tags": [
          "Incidents"
        ],
        "operationId": "listIncidentNotes",
        "description": "List existing notes for the specified incident.",
        "summary": "List notes for an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of notes.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IncidentNote"
                      }
                    }
                  },
                  "required": [
                    "notes"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "notes": [
                        {
                          "id": "PWL7QXS",
                          "user": {
                            "id": "PXPGF42",
                            "type": "user_reference",
                            "summary": "Earline Greenholt",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          },
                          "content": "Firefighters are on the scene.",
                          "created_at": "2013-03-06T20:28:51.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Incidents"
        ],
        "operationId": "createIncidentNote",
        "description": "Create a new note for the specified incident.",
        "summary": "Create a note on an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "note": {
                    "$ref": "#/components/schemas/IncidentNote"
                  }
                },
                "required": [
                  "note"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new note.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "note": {
                      "$ref": "#/components/schemas/IncidentNote"
                    }
                  },
                  "required": [
                    "note"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "note": {
                        "id": "PWL7QXS",
                        "user": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        },
                        "content": "Firefighters are on the scene.",
                        "created_at": "2013-03-06T20:28:51.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/status_updates": {
      "description": "Create incident status updates.",
      "post": {
        "tags": [
          "Incidents"
        ],
        "operationId": "createIncidentStatusUpdate",
        "description": "Create a new status update for the specified incident.",
        "summary": "Create a status update on an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "The message to be posted as a status update."
                  }
                },
                "required": [
                  "message"
                ],
                "example": {
                  "message": "The server fire is spreading."
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new status update for the specified incident.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status_update": {
                      "$ref": "#/components/schemas/StatusUpdate"
                    }
                  },
                  "required": [
                    "status_update"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "status_update": {
                        "id": "PWL7QXS",
                        "message": "The server fire is spreading.",
                        "sender": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        },
                        "created_at": "2013-03-06T20:28:51.000Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/responder_requests": {
      "description": "Add responders to an incident.",
      "post": {
        "tags": [
          "Incidents"
        ],
        "operationId": "createIncidentResponderRequest",
        "description": "Send a new responder request for the specified incident.",
        "summary": "Create a responder request for an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requester_id": {
                    "type": "string",
                    "description": "The user id of the requester."
                  },
                  "message": {
                    "type": "string",
                    "description": "The message sent with the responder request."
                  },
                  "responder_request_targets": {
                    "description": "The array of targets the responder request is sent to.",
                    "items": {
                      "$ref": "#/components/schemas/ResponderRequestTargetReference"
                    }
                  }
                },
                "required": [
                  "requester_id",
                  "message",
                  "responder_request_targets"
                ],
                "example": {
                  "requester_id": "PL1JMK5",
                  "message": "Please help with issue - join bridge at +1(234)-567-8910",
                  "responder_request_targets": [
                    {
                      "responder_request_target": {
                        "id": "PJ25ZYX",
                        "type": "user_reference"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The new responder request for the given incident.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responder_request": {
                      "$ref": "#/components/schemas/ResponderRequest"
                    }
                  },
                  "required": [
                    "responder_request"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "responder_request": {
                        "incident": {
                          "id": "PXP12GZ",
                          "type": "incident_reference",
                          "summary": "Ongoing Incident in Mailroom",
                          "self": "https://api.pagerduty.com/incidents/PXP12GZ",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PXP12GZ"
                        },
                        "requester": {
                          "id": "P09TT3C",
                          "type": "user_reference",
                          "summary": "Jane Doe",
                          "self": "https://api.pagerduty.com/users/P09TT3C",
                          "html_url": "https://subdomain.pagerduty.com/users/P09TT3C"
                        },
                        "requested_at": "2018-08-16T21:55:17.000Z",
                        "message": "Please help with issue - join bridge at +1(234)-567-8910",
                        "responder_request_targets": {
                          "responder_request_target": {
                            "type": "user",
                            "id": "PL7A2O4",
                            "incidents_responders": {
                              "state": "pending",
                              "user": {
                                "id": "PL7A2O4",
                                "type": "user_reference",
                                "summary": "Lee Turner",
                                "self": "https://api.pagerduty.com/users/PL7A2O4",
                                "html_url": "https://subdomain.pagerduty.com/users/PL7A2O4",
                                "avatar_url": "https://secure.gravatar.com/avatar/51c673f51f6b483b24c889bbafbd2a67.png?d=mm&r=PG"
                              },
                              "incident": {
                                "id": "PXP12GZ",
                                "type": "incident_reference",
                                "summary": "Ongoing Incident in Mailroom",
                                "self": "https://api.pagerduty.com/incidents/PXP12GZ",
                                "html_url": "https://subdomain.pagerduty.com/incidents/PXP12GZ"
                              },
                              "updated_at": "2018-08-09T21:40:48.000Z",
                              "message": "Please help with issue - join bridge at +1(234)-567-8910",
                              "requester": {
                                "id": "P09TT3C",
                                "type": "user_reference",
                                "summary": "Jane Doe",
                                "self": "https://api.pagerduty.com/users/P09TT3C",
                                "html_url": "https://subdomain.pagerduty.com/users/P09TT3C",
                                "avatar_url": "https://secure.gravatar.com/avatar/1c747247b75acc1f724e2784c838b3f8.png?d=mm&r=PG"
                              },
                              "requested_at": "2018-08-09T21:40:49.000Z"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/incidents/{id}/snooze": {
      "description": "\"Snooze\" an incident. This suspends the acknowledgement timeout and auto-resolution for a given amount of time.",
      "post": {
        "tags": [
          "Incidents"
        ],
        "operationId": "createIncidentSnooze",
        "description": "Snooze an incident.",
        "summary": "Snooze an incident",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "duration": {
                    "type": "integer",
                    "description": "The number of seconds to snooze the incident for. After this number of seconds has elapsed, the incident will return to the \"triggered\" state."
                  }
                },
                "required": [
                  "duration"
                ],
                "example": {
                  "duration": 3600
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The incident that was successfully snoozed.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "incident": {
                      "$ref": "#/components/schemas/Incident"
                    }
                  },
                  "required": [
                    "incident"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "incident": {
                        "id": "PT4KHLK",
                        "type": "incident",
                        "summary": "[#1234] The server is on fire.",
                        "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK",
                        "incident_number": 1234,
                        "created_at": "2015-10-06T21:30:42.000Z",
                        "status": "resolved",
                        "pending_actions": [
                          {
                            "type": "unacknowledge",
                            "at": "2015-11-10T01:02:52.000Z"
                          },
                          {
                            "type": "resolve",
                            "at": "2015-11-10T04:31:52.000Z"
                          }
                        ],
                        "incident_key": "baf7cf21b1da41b4b0221008339ff357",
                        "service": {
                          "id": "PIJ90N7",
                          "type": "generic_email",
                          "summary": "My Mail Service",
                          "self": "https://api.pagerduty.com/services/PIJ90N7",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                        },
                        "assigned_via": "escalation_policy",
                        "assignments": [
                          {
                            "at": "2015-11-10T00:31:52.000Z",
                            "assignee": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "acknowledgements": [
                          {
                            "at": "2015-11-10T00:32:52.000Z",
                            "acknowledger": {
                              "id": "PXPGF42",
                              "type": "user_reference",
                              "summary": "Earline Greenholt",
                              "self": "https://api.pagerduty.com/users/PXPGF42",
                              "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                            }
                          }
                        ],
                        "last_status_change_at": "2015-10-06T21:38:23.000Z",
                        "last_status_change_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        },
                        "first_trigger_log_entry": {
                          "id": "Q02JTSNZWHSEKV",
                          "type": "trigger_log_entry_reference",
                          "summary": "Triggered through the API",
                          "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV"
                        },
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/log_entries": {
      "description": "List all of the log entries across your account. These can be filtered (for instance, by time or by team), and the results will be paginated.",
      "get": {
        "tags": [
          "Log Entries"
        ],
        "operationId": "listLogEntries",
        "description": "List all of the incident log entries across the entire account.",
        "summary": "List log entries",
        "parameters": [
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/log_entry_is_overview"
          },
          {
            "$ref": "#/components/parameters/include_log_entry"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of log entries.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "log_entries": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LogEntryReference"
                          }
                        }
                      },
                      "required": [
                        "log_entries"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "log_entries": [
                        {
                          "id": "Q02JTSNZWHSEKV",
                          "type": "trigger_log_entry",
                          "summary": "Triggered through the API",
                          "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV",
                          "created_at": "2015-11-07T00:14:20.000Z",
                          "agent": {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          },
                          "channel": {
                            "type": "api"
                          },
                          "incident": {
                            "id": "PT4KHLK",
                            "type": "incident_reference",
                            "summary": "[#1234] The server is on fire.",
                            "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                            "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK"
                          },
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ],
                          "contexts": [],
                          "event_details": {
                            "description": "Tasks::SFDCValidator - PD_Data__c - duplicates"
                          }
                        }
                      ],
                      "limit": 1,
                      "offset": 0,
                      "more": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/log_entries/{id}": {
      "description": "Get a single log entry by ID.",
      "get": {
        "tags": [
          "Log Entries"
        ],
        "operationId": "getLogEntry",
        "description": "Get details for a specific incident log entry. This method provides additional information you can use to get at raw event data.",
        "summary": "Get a log entry",
        "parameters": [
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include_log_entry"
          }
        ],
        "responses": {
          "200": {
            "description": "A single log entry.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "log_entry": {
                      "$ref": "#/components/schemas/LogEntry"
                    }
                  },
                  "required": [
                    "log_entry"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "log_entry": {
                        "id": "Q02JTSNZWHSEKV",
                        "type": "trigger_log_entry",
                        "summary": "Triggered through the API",
                        "self": "https://api.pagerduty.com/log_entries/Q02JTSNZWHSEKV?incident_id=PT4KHLK",
                        "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK/log_entries/Q02JTSNZWHSEKV",
                        "created_at": "2015-11-07T00:14:20.000Z",
                        "agent": {
                          "id": "PIJ90N7",
                          "type": "generic_email_reference",
                          "summary": "My Mail Service",
                          "self": "https://api.pagerduty.com/services/PIJ90N7",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                        },
                        "channel": {
                          "type": "api"
                        },
                        "incident": {
                          "id": "PT4KHLK",
                          "type": "incident_reference",
                          "summary": "[#1234] The server is on fire.",
                          "self": "https://api.pagerduty.com/incidents/PT4KHLK",
                          "html_url": "https://subdomain.pagerduty.com/incidents/PT4KHLK"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "contexts": [],
                        "event_details": {
                          "description": "Tasks::SFDCValidator - PD_Data__c - duplicates"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/maintenance_windows": {
      "description": "List and create maintenance windows.",
      "get": {
        "tags": [
          "Maintenance Windows"
        ],
        "operationId": "listMaintenanceWindows",
        "description": "List existing maintenance windows, optionally filtered by service and/or team, or whether they are from the past, present or future.",
        "summary": "List maintenance windows",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_ids"
          },
          {
            "$ref": "#/components/parameters/services"
          },
          {
            "$ref": "#/components/parameters/include_maintenance_window"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Only return maintenance windows in a given state.",
            "schema": {
              "type": "string",
              "enum": [
                "past",
                "future",
                "ongoing",
                "open",
                "all"
              ]
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filters the results, showing only the maintenance windows whose descriptions contain the query.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of maintenance windows.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "maintenance_windows": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/MaintenanceWindow"
                          }
                        }
                      },
                      "required": [
                        "maintenance_windows"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "maintenance_windows": [
                        {
                          "id": "PW98YIO",
                          "type": "maintenance_window",
                          "summary": "Immanentizing the eschaton",
                          "self": "https://api.pagerduty.com/maintenance_windows/PW98YIO",
                          "html_url": "https://subdomain.pagerduty.com/maintenance_windows#/show/PW98YIO",
                          "sequence_number": 1,
                          "start_time": "2015-11-10T01:00:00.000Z",
                          "end_time": "2015-11-10T03:00:00.000Z",
                          "description": "Immanentizing the eschaton",
                          "services": [
                            {
                              "id": "PIJ90N7",
                              "type": "generic_email_reference",
                              "summary": "My Mail Service",
                              "self": "https://api.pagerduty.com/services/PIJ90N7",
                              "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                            }
                          ],
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ],
                          "created_by": {
                            "id": "PXPGF42",
                            "type": "user_reference",
                            "summary": "Earline Greenholt",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          }
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Maintenance Windows"
        ],
        "operationId": "createMaintenanceWindow",
        "description": "Create a new maintenance window for the specified services. No new incidents will be created for a service that is in maintenance.",
        "summary": "Create a maintenance window",
        "parameters": [
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maintenance_window": {
                    "$ref": "#/components/schemas/MaintenanceWindowReference"
                  }
                },
                "required": [
                  "maintenance_window"
                ]
              }
            }
          },
          "description": "The maintenance window object."
        },
        "responses": {
          "201": {
            "description": "The maintenance window that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maintenance_window": {
                      "$ref": "#/components/schemas/MaintenanceWindow"
                    }
                  },
                  "required": [
                    "maintenance_window"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "maintenance_window": {
                        "id": "PW98YIO",
                        "type": "maintenance_window",
                        "summary": "Immanentizing the eschaton",
                        "self": "https://api.pagerduty.com/maintenance_windows/PW98YIO",
                        "html_url": "https://subdomain.pagerduty.com/maintenance_windows#/show/PW98YIO",
                        "sequence_number": 1,
                        "start_time": "2015-11-10T01:00:00.000Z",
                        "end_time": "2015-11-10T03:00:00.000Z",
                        "description": "Immanentizing the eschaton",
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ],
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "created_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/maintenance_windows/{id}": {
      "description": "Manage a maintenance window.",
      "get": {
        "tags": [
          "Maintenance Windows"
        ],
        "operationId": "getMaintenanceWindow",
        "description": "Get an existing maintenance window.",
        "summary": "Get a maintenance window",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include_maintenance_window"
          }
        ],
        "responses": {
          "200": {
            "description": "The maintenance window that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maintenance_window": {
                      "$ref": "#/components/schemas/MaintenanceWindow"
                    }
                  },
                  "required": [
                    "maintenance_window"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "maintenance_window": {
                        "id": "PW98YIO",
                        "type": "maintenance_window",
                        "summary": "Immanentizing the eschaton",
                        "self": "https://api.pagerduty.com/maintenance_windows/PW98YIO",
                        "html_url": "https://subdomain.pagerduty.com/maintenance_windows#/show/PW98YIO",
                        "sequence_number": 1,
                        "start_time": "2015-11-10T01:00:00.000Z",
                        "end_time": "2015-11-10T03:00:00.000Z",
                        "description": "Immanentizing the eschaton",
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ],
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "created_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Maintenance Windows"
        ],
        "operationId": "deleteMaintenanceWindow",
        "description": "Delete an existing maintenance window if it's in the future, or end it if it's currently on-going. If the maintenance window has already ended it cannot be deleted.",
        "summary": "Delete or end a maintenance window",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The maintenance window was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "405": {
            "description": "The maintenance window can't be deleted because it has already ended."
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Maintenance Windows"
        ],
        "operationId": "updateMaintenanceWindow",
        "description": "Update an existing maintenance window.",
        "summary": "Update a maintenance window",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maintenance_window": {
                    "$ref": "#/components/schemas/MaintenanceWindowReference"
                  }
                },
                "required": [
                  "maintenance_window"
                ]
              }
            }
          },
          "description": "The maintenance window to be updated."
        },
        "responses": {
          "200": {
            "description": "The maintenance window that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maintenance_window": {
                      "$ref": "#/components/schemas/MaintenanceWindow"
                    }
                  },
                  "required": [
                    "maintenance_window"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "maintenance_window": {
                        "id": "PW98YIO",
                        "type": "maintenance_window",
                        "summary": "Immanentizing the eschaton",
                        "self": "https://api.pagerduty.com/maintenance_windows/PW98YIO",
                        "html_url": "https://subdomain.pagerduty.com/maintenance_windows#/show/PW98YIO",
                        "sequence_number": 1,
                        "start_time": "2015-11-10T01:00:00.000Z",
                        "end_time": "2015-11-10T03:00:00.000Z",
                        "description": "Immanentizing the eschaton",
                        "services": [
                          {
                            "id": "PIJ90N7",
                            "type": "generic_email_reference",
                            "summary": "My Mail Service",
                            "self": "https://api.pagerduty.com/services/PIJ90N7",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7"
                          }
                        ],
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "created_by": {
                          "id": "PXPGF42",
                          "type": "user_reference",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/notifications": {
      "description": "List notifications that have been delivered to responders.",
      "get": {
        "tags": [
          "Notifications"
        ],
        "operationId": "listNotifications",
        "description": "List notifications for a given time range, optionally filtered by type (sms_notification, email_notification, phone_notification, or push_notification).",
        "summary": "List notifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "name": "since",
            "in": "query",
            "description": "The start of the date range over which you want to search. The time element is optional.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The end of the date range over which you want to search. This should be in the same format as since. The size of the date range must be less than 3 months.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Return notification of this type only.",
            "schema": {
              "type": "string",
              "enum": [
                "sms_notification",
                "email_notification",
                "phone_notification",
                "push_notification"
              ]
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "users"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of notifications.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "notifications": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Notification"
                          }
                        }
                      },
                      "required": [
                        "notifications"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "notifications": [
                        {
                          "id": "PWL7QXS",
                          "type": "phone_notification",
                          "started_at": "2013-03-06T20:28:51.000Z",
                          "address": "+15555551234",
                          "user": {
                            "id": "PT23IWX",
                            "type": "user",
                            "summary": "Tim Wright",
                            "self": "https://api.pagerduty.com/users/PT23IWX",
                            "html_url": "https://subdomain.pagerduty.com/users/PT23IWX"
                          }
                        },
                        {
                          "id": "PKN7NBH",
                          "type": "push_notification",
                          "started_at": "2013-03-06T20:28:51.000Z",
                          "user": {
                            "id": "PT23IWX",
                            "type": "user",
                            "summary": "Tim Wright",
                            "self": "https://api.pagerduty.com/users/PT23IWX",
                            "html_url": "https://subdomain.pagerduty.com/users/PT23IWX"
                          }
                        }
                      ],
                      "limit": 100,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/oncalls": {
      "description": "List all of the on-call entries within a given time range for a given set of users, escalation policies, and/or schedules. Each on-call entry includes:\n\n\n- the date/time period for the on-call entry;\n- the escalation policy, rule, and level;\n- the schedule, if the rule targeted a schedule and not a user; and,\n- the user on call for the escalation policy rule during that time.\n",
      "get": {
        "tags": [
          "On-Calls"
        ],
        "operationId": "listOnCalls",
        "description": "List the on-call entries during a given time range.",
        "summary": "List all of the on-calls",
        "parameters": [
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "escalation_policies",
                "users",
                "schedules"
              ]
            }
          },
          {
            "name": "user_ids[]",
            "in": "query",
            "description": "Filters the results, showing only on-calls for the specified user IDs.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "escalation_policy_ids[]",
            "in": "query",
            "description": "Filters the results, showing only on-calls for the specified escalation policy IDs.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "schedule_ids[]",
            "in": "query",
            "description": "Filters the results, showing only on-calls for the specified schedule IDs. If `null` is provided in the array, it includes permanent on-calls due to direct user escalation targets.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "The start of the time range over which you want to search. If an on-call period overlaps with the range, it will be included in the result. Defaults to current time. The search range cannot exceed 3 months.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The end of the time range over which you want to search. If an on-call period overlaps with the range, it will be included in the result. Defaults to current time. The search range cannot exceed 3 months, and the `until` time cannot be before the `since` time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "earliest",
            "in": "query",
            "description": "This will filter on-calls such that only the earliest on-call for each combination of escalation policy, escalation level, and user is returned. This is useful for determining when the \"next\" on-calls are for a given set of filters.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of on-call objects.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "oncalls": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Oncall"
                          }
                        }
                      },
                      "required": [
                        "oncalls"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "oncalls": [
                        {
                          "user": {
                            "id": "PT23IWX",
                            "type": "user_reference",
                            "summary": "Tim Wright",
                            "self": "https://api.pagerduty.com/users/PT23IWX",
                            "html_url": "https://subdomain.pagerduty.com/users/PT23IWX"
                          },
                          "schedule": {
                            "id": "PI7DH85",
                            "type": "schedule_reference",
                            "summary": "Daily Engineering Rotation",
                            "self": "https://api.pagerduty.com/schedules/PI7DH85",
                            "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85"
                          },
                          "escalation_policy": {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Engineering Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          },
                          "escalation_level": 2,
                          "start": "2015-03-06T20:28:51.000Z",
                          "end": "2015-03-07T20:28:51.000Z"
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/priorities": {
      "description": "List priorities.",
      "get": {
        "tags": [
          "Priorities"
        ],
        "operationId": "listPriorities",
        "description": "List existing priorities, in order (most to least severe).",
        "summary": "List priorities",
        "responses": {
          "200": {
            "description": "A paginated array of priorities.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "priorities": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Priority"
                          }
                        }
                      },
                      "required": [
                        "priorities"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "priorities": [
                        {
                          "id": "PSLWBL8",
                          "type": "priority",
                          "summary": "P1",
                          "self": "https://api.pagerduty.com/priorities/PSLWBL8",
                          "name": "P1",
                          "description": "Critical issue that warrants public notification and liaison with executive teams"
                        },
                        {
                          "id": "P53ZZH5",
                          "type": "priority",
                          "summary": "P2",
                          "self": "https://api.pagerduty.com/priorities/P53ZZH5",
                          "name": "P2",
                          "description": "Critical system issue actively impacting many customers' ability to use the product"
                        },
                        {
                          "id": "PGE9YCZ",
                          "type": "priority",
                          "summary": "P3",
                          "self": "https://api.pagerduty.com/priorities/PGE9YCZ",
                          "name": "P3",
                          "description": "Stability or minor customer-impacting issues that require immediate attention from service owners"
                        },
                        {
                          "id": "PVJPWYW",
                          "type": "priority",
                          "summary": "P4",
                          "self": "https://api.pagerduty.com/priorities/PVJPWYW",
                          "name": "P4",
                          "description": "Minor issues requiring action, but not affecting customer ability to use the product"
                        },
                        {
                          "id": "P81SUUT",
                          "type": "priority",
                          "summary": "P5",
                          "self": "https://api.pagerduty.com/priorities/P81SUUT",
                          "name": "P5",
                          "description": "Cosmetic issues or bugs, not affecting customer ability to use the product"
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/response_plays/{response_play_id}/run": {
      "description": "Run response plays.",
      "post": {
        "tags": [
          "Response Plays"
        ],
        "operationId": "runResponsePlay",
        "description": "Run a specified response play on a given incident.",
        "summary": "Run a response play",
        "parameters": [
          {
            "$ref": "#/components/parameters/response_play_id"
          },
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "incident": {
                    "$ref": "#/components/schemas/IncidentReference"
                  }
                },
                "required": [
                  "incident"
                ],
                "example": {
                  "incident": {
                    "id": "PWL7QXS",
                    "type": "incident_reference"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Informs the user if the response play has been run successfully.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "status": "ok"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/schedules": {
      "description": "List and create on-call schedules.",
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "listSchedules",
        "description": "List the on-call schedules.",
        "summary": "List schedules",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filters the result, showing only the schedules whose name matches the query.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of schedule objects.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "schedules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Schedule"
                          }
                        }
                      },
                      "required": [
                        "schedules"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "schedules": [
                        {
                          "id": "PI7DH85",
                          "type": "schedule",
                          "summary": "Daily Engineering Rotation",
                          "self": "https://api.pagerduty.com/schedules/PI7DH85",
                          "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85",
                          "name": "Daily Engineering Rotation",
                          "time_zone": "America/New_York",
                          "description": "Rotation schedule for engineering",
                          "escalation_policies": [
                            {
                              "id": "PT20YPA",
                              "type": "escalation_policy_reference",
                              "summary": "Another Escalation Policy",
                              "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                              "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                            }
                          ],
                          "users": [
                            {
                              "id": "PEYSGVF",
                              "type": "user",
                              "summary": "PagerDuty Admin",
                              "self": "https://api.pagerduty.com/users/PEYSGVF",
                              "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                            }
                          ],
                          "schedule_layers": [
                            {
                              "users": [
                                {
                                  "user": {
                                    "id": "PEYSGVF",
                                    "type": "user",
                                    "summary": "PagerDuty Admin",
                                    "self": "https://api.pagerduty.com/users/PEYSGVF",
                                    "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ],
                      "limit": 100,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Schedules"
        ],
        "operationId": "createSchedule",
        "description": "Create a new on-call schedule.",
        "summary": "Create a schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/schedule_overflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schedule": {
                    "$ref": "#/components/schemas/ScheduleReference"
                  }
                },
                "required": [
                  "schedule"
                ]
              }
            }
          },
          "description": "The schedule to be created."
        },
        "responses": {
          "201": {
            "description": "The schedule object created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schedule": {
                      "$ref": "#/components/schemas/Schedule"
                    }
                  },
                  "required": [
                    "schedule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "schedule": {
                        "id": "PI7DH85",
                        "type": "schedule",
                        "summary": "Daily Engineering Rotation",
                        "self": "https://api.pagerduty.com/schedules/PI7DH85",
                        "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85",
                        "name": "Daily Engineering Rotation",
                        "time_zone": "America/New_York",
                        "description": "Rotation schedule for engineering",
                        "escalation_policies": [
                          {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Another Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          }
                        ],
                        "users": [
                          {
                            "id": "PEYSGVF",
                            "type": "user",
                            "summary": "PagerDuty Admin",
                            "self": "https://api.pagerduty.com/users/PEYSGVF",
                            "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                          }
                        ],
                        "schedule_layers": [
                          {
                            "name": "Layer 1",
                            "rendered_schedule_entries": [],
                            "id": "PG68P1M",
                            "start": "2015-11-07T01:00:00.000Z",
                            "rotation_virtual_start": "2015-11-07T01:00:00.000Z",
                            "rotation_turn_length_seconds": 86400,
                            "users": [
                              {
                                "user": {
                                  "id": "PEYSGVF",
                                  "type": "user",
                                  "summary": "PagerDuty Admin",
                                  "self": "https://api.pagerduty.com/users/PEYSGVF",
                                  "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                                }
                              }
                            ],
                            "restrictions": [
                              {
                                "type": "daily_restriction",
                                "start_time_of_day": "08:00:00",
                                "duration_seconds": 32400
                              }
                            ]
                          }
                        ],
                        "overrides_subschedule": {
                          "name": "Overrides",
                          "rendered_schedule_entries": []
                        },
                        "final_schedule": {
                          "name": "Final Schedule",
                          "rendered_schedule_entries": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/schedules/{id}": {
      "description": "Manage an on-call schedule.",
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "getSchedule",
        "description": "Show detailed information about a schedule, including entries for each layer and sub-schedule.",
        "summary": "Get a schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "The schedule object.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schedule": {
                      "$ref": "#/components/schemas/Schedule"
                    }
                  },
                  "required": [
                    "schedule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "schedule": {
                        "id": "PI7DH85",
                        "type": "schedule",
                        "summary": "Daily Engineering Rotation",
                        "self": "https://api.pagerduty.com/schedules/PI7DH85",
                        "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85",
                        "name": "Daily Engineering Rotation",
                        "time_zone": "America/New_York",
                        "description": "Rotation schedule for engineering",
                        "escalation_policies": [
                          {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Another Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          }
                        ],
                        "users": [
                          {
                            "id": "PXPGF42",
                            "type": "user",
                            "summary": "Regina Phalange",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          }
                        ],
                        "schedule_layers": [
                          {
                            "name": "Layer 1",
                            "rendered_schedule_entries": [
                              {
                                "start": "2015-11-09T13:00:00.000Z",
                                "end": "2015-11-09T22:00:00.000Z",
                                "user": {
                                  "id": "PXPGF42",
                                  "type": "user",
                                  "summary": "Regina Phalange",
                                  "self": "https://api.pagerduty.com/users/PXPGF42",
                                  "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                                }
                              }
                            ],
                            "rendered_coverage_percentage": 37.5,
                            "id": "PG68P1M",
                            "start": "2015-11-07T02:00:00.000Z",
                            "rotation_virtual_start": "2015-11-07T01:00:00.000Z",
                            "rotation_turn_length_seconds": 86400,
                            "users": [
                              {
                                "user": {
                                  "id": "PXPGF42",
                                  "type": "user",
                                  "summary": "Regina Phalange",
                                  "self": "https://api.pagerduty.com/users/PXPGF42",
                                  "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                                }
                              }
                            ],
                            "restrictions": [
                              {
                                "type": "daily_restriction",
                                "start_time_of_day": "08:00:00",
                                "duration_seconds": 32400
                              }
                            ]
                          }
                        ],
                        "overrides_subschedule": {
                          "name": "Overrides",
                          "rendered_schedule_entries": [],
                          "rendered_coverage_percentage": 0
                        },
                        "final_schedule": {
                          "name": "Final Schedule",
                          "rendered_schedule_entries": [
                            {
                              "start": "2015-11-10T13:00:00.000Z",
                              "end": "2015-11-10T22:00:00.000Z",
                              "user": {
                                "id": "PXPGF42",
                                "type": "user",
                                "summary": "Regina Phalange",
                                "self": "https://api.pagerduty.com/users/PXPGF42",
                                "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                              }
                            }
                          ],
                          "rendered_coverage_percentage": 37.5
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Schedules"
        ],
        "operationId": "deleteSchedule",
        "description": "Delete an on-call schedule.",
        "summary": "Delete a schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The schedule was deleted successfully."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Schedules"
        ],
        "operationId": "updateSchedule",
        "description": "Update an existing on-call schedule.",
        "summary": "Update a schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/schedule_overflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schedule": {
                    "$ref": "#/components/schemas/ScheduleReference"
                  }
                },
                "required": [
                  "schedule"
                ]
              }
            }
          },
          "description": "The schedule to be updated."
        },
        "responses": {
          "200": {
            "description": "The updated schedule.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schedule": {
                      "$ref": "#/components/schemas/Schedule"
                    }
                  },
                  "required": [
                    "schedule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "schedule": {
                        "id": "PI7DH85",
                        "type": "schedule",
                        "summary": "Daily Engineering Rotation",
                        "self": "https://api.pagerduty.com/schedules/PI7DH85",
                        "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85",
                        "name": "Daily Engineering Rotation",
                        "time_zone": "America/New_York",
                        "description": "Rotation schedule for engineering",
                        "escalation_policies": [
                          {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Another Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          }
                        ],
                        "users": [
                          {
                            "id": "PXPGF42",
                            "type": "user",
                            "summary": "Regina Phalange",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          }
                        ],
                        "schedule_layers": [
                          {
                            "name": "Layer 1",
                            "rendered_schedule_entries": [],
                            "id": "PG68P1M",
                            "start": "2015-11-07T01:00:00.000Z",
                            "rotation_virtual_start": "2015-11-07T01:00:00.000Z",
                            "rotation_turn_length_seconds": 86400,
                            "users": [
                              {
                                "user": {
                                  "id": "PXPGF42",
                                  "type": "user",
                                  "summary": "Regina Phalange",
                                  "self": "https://api.pagerduty.com/users/PXPGF42",
                                  "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                                }
                              }
                            ],
                            "restrictions": [
                              {
                                "type": "daily",
                                "start_time_of_day": "08:00:00",
                                "duration_seconds": 32400
                              }
                            ]
                          }
                        ],
                        "overrides_subschedule": {
                          "name": "Overrides",
                          "rendered_schedule_entries": []
                        },
                        "final_schedule": {
                          "name": "Final Schedule",
                          "rendered_schedule_entries": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/schedules/preview": {
      "description": "Preview what an on-call schedule would look like without saving it. This works the same as the update or create actions, except that the result is not persisted. Preview optionally takes two additional arguments, since and until, delimiting the span of the preview.",
      "post": {
        "tags": [
          "Schedules"
        ],
        "operationId": "createSchedulePreview",
        "description": "Preview what an on-call schedule would look like without saving it.",
        "summary": "Preview a schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          },
          {
            "$ref": "#/components/parameters/schedule_overflow"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schedule": {
                    "$ref": "#/components/schemas/Schedule"
                  }
                },
                "required": [
                  "schedule"
                ]
              }
            }
          },
          "description": "The schedule to be previewed."
        },
        "responses": {
          "200": {
            "description": "What the schedule will look like if posted.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "schedule": {
                      "$ref": "#/components/schemas/Schedule"
                    }
                  },
                  "required": [
                    "schedule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "schedule": {
                        "id": "PI7DH85",
                        "type": "schedule",
                        "summary": "Daily Engineering Rotation",
                        "self": "https://api.pagerduty.com/schedules/PI7DH85",
                        "html_url": "https://subdomain.pagerduty.com/schedules/PI7DH85",
                        "name": "Daily Engineering Rotation",
                        "time_zone": "America/New_York",
                        "description": "Rotation schedule for engineering",
                        "escalation_policies": [],
                        "users": [
                          {
                            "id": "PXPGF42",
                            "type": "user",
                            "summary": "Regina Phalange",
                            "self": "https://api.pagerduty.com/users/PXPGF42",
                            "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                          }
                        ],
                        "schedule_layers": [
                          {
                            "name": "Layer 1",
                            "rendered_schedule_entries": [],
                            "id": "PG68P1M",
                            "start": "2015-11-07T01:00:00.000Z",
                            "rotation_virtual_start": "2015-11-07T01:00:00.000Z",
                            "rotation_turn_length_seconds": 86400,
                            "users": [
                              {
                                "user": {
                                  "id": "PXPGF42",
                                  "type": "user",
                                  "summary": "Regina Phalange",
                                  "self": "https://api.pagerduty.com/users/PXPGF42",
                                  "html_url": "https://subdomain.pagerduty.com/users/PXPGF42"
                                }
                              }
                            ],
                            "restrictions": [
                              {
                                "type": "daily",
                                "start_time_of_day": "08:00:00",
                                "duration_seconds": 32400
                              }
                            ]
                          }
                        ],
                        "overrides_subschedule": {
                          "name": "Overrides",
                          "rendered_schedule_entries": []
                        },
                        "final_schedule": {
                          "name": "Final Schedule",
                          "rendered_schedule_entries": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/schedules/{id}/overrides": {
      "description": "List and create schedule overrides.",
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "listScheduleOverrides",
        "description": "List overrides for a given time range.",
        "summary": "List overrides",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "since",
            "in": "query",
            "description": "The start of the date range over which you want to search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The end of the date range over which you want to search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "editable",
            "in": "query",
            "description": "When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "overflow",
            "in": "query",
            "description": "Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow=true is passed. This parameter defaults to false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The collection of override objects returned by the query.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "overrides": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Override"
                      }
                    }
                  },
                  "required": [
                    "overrides"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "overrides": [
                        {
                          "id": "PQ47DCP",
                          "start": "2012-07-01T04:00:00.000Z",
                          "end": "2012-07-02T04:00:00.000Z",
                          "user": {
                            "id": "PEYSGVF",
                            "type": "user_reference",
                            "summary": "Aurelio Rice",
                            "self": "https://api.pagerduty.com/users/PEYSGVF",
                            "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Schedules"
        ],
        "operationId": "createScheduleOverride",
        "description": "Create an override for a specific user covering the specified time range. If you create an override on top of an existing one, the last created override will have priority.",
        "summary": "Create an override",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "override": {
                    "$ref": "#/components/schemas/Override"
                  }
                },
                "required": [
                  "override"
                ]
              }
            }
          },
          "description": "The override to be created",
          "required": true
        },
        "responses": {
          "201": {
            "description": "The override that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "override": {
                      "$ref": "#/components/schemas/Override"
                    }
                  },
                  "required": [
                    "override"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "override": {
                        "id": "PQ47DCP",
                        "start": "2012-07-01T04:00:00.000Z",
                        "end": "2012-07-02T04:00:00.000Z",
                        "user": {
                          "id": "PEYSGVF",
                          "type": "user_reference",
                          "summary": "Aurelio Rice",
                          "self": "https://api.pagerduty.com/users/PEYSGVF",
                          "html_url": "https://subdomain.pagerduty.com/users/PEYSGVF"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/schedules/{id}/overrides/{override_id}": {
      "description": "Delete a schedule override.",
      "delete": {
        "tags": [
          "Schedules"
        ],
        "operationId": "deleteScheduleOverride",
        "description": "Remove an override. You cannot remove a past override. If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time. If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.",
        "summary": "Delete an override",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/schedule_override_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The override was truncated."
          },
          "204": {
            "description": "The override was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/schedules/{id}/users": {
      "description": "List the users on call for a given schedule.",
      "get": {
        "tags": [
          "Schedules"
        ],
        "operationId": "listScheduleUsers",
        "description": "List all of the users on call in a given schedule for a given time range.",
        "summary": "List users on call.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/since"
          },
          {
            "$ref": "#/components/parameters/until"
          }
        ],
        "responses": {
          "200": {
            "description": "The users on the given schedule.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "readOnly": true,
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  },
                  "required": [
                    "users"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "users": [
                        {
                          "id": "PAM4FGS",
                          "type": "user",
                          "summary": "Kyler Kuhn",
                          "self": "https://api.pagerduty.com/users/PAM4FGS",
                          "html_url": "https://subdomain.pagerduty.com/users/PAM4FGS",
                          "name": "Kyler Kuhn",
                          "email": "126_dvm_kyler_kuhn@beahan.name",
                          "time_zone": "Asia/Hong_Kong",
                          "color": "red",
                          "role": "admin",
                          "avatar_url": "https://secure.gravatar.com/avatar/47857d059adacf9a41dc4030c2e14b0a.png?d=mm&r=PG",
                          "description": "Engineer based in HK",
                          "invitation_sent": false,
                          "contact_methods": [
                            {
                              "id": "PVMGSML",
                              "type": "email_contact_method_reference",
                              "summary": "Work",
                              "self": "https://api.pagerduty.com/users/PAM4FGS/contact_methods/PVMGSMLL"
                            }
                          ],
                          "notification_rules": [
                            {
                              "id": "P6EJ1EE",
                              "start_delay_in_minutes": 0,
                              "created_at": "2015-12-11T23:38:11.000Z",
                              "contact_method": {
                                "id": "PVMGSML",
                                "type": "email_contact_method_reference",
                                "summary": "Work",
                                "self": "https://api.pagerduty.com/users/PAM4FGS/contact_methods/PVMGSMLL"
                              },
                              "urgency": "high",
                              "type": "assignment_notification_rule"
                            }
                          ],
                          "job_title": "Senior Engineer",
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ]
                        },
                        {
                          "id": "PXPGF42",
                          "type": "user",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42",
                          "name": "Earline Greenholt",
                          "email": "125.greenholt.earline@graham.name",
                          "time_zone": "America/Lima",
                          "color": "green",
                          "role": "admin",
                          "avatar_url": "https://secure.gravatar.com/avatar/a8b714a39626f2444ee05990b078995f.png?d=mm&r=PG",
                          "description": "I'm the boss",
                          "invitation_sent": false,
                          "contact_methods": [
                            {
                              "id": "PTDVERC",
                              "type": "email_contact_method_reference",
                              "summary": "Default",
                              "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                            }
                          ],
                          "notification_rules": [
                            {
                              "id": "P8GRWKK",
                              "start_delay_in_minutes": 0,
                              "created_at": "2015-12-11T23:38:11.000Z",
                              "contact_method": {
                                "id": "PTDVERC",
                                "type": "email_contact_method_reference",
                                "summary": "Default",
                                "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                              },
                              "urgency": "low",
                              "type": "assignment_notification_rule"
                            }
                          ],
                          "job_title": "Director of Engineering",
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/service_dependencies/associate": {
      "description": "Associate dependencies of services.",
      "post": {
        "tags": [
          "Business Services"
        ],
        "operationId": "createServiceDependency",
        "summary": "Associate service dependencies",
        "description": "Create new dependencies between two services.",
        "parameters": [
          {
            "name": "relationships",
            "in": "query",
            "description": "Multiple relationships of service dependencies to be created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "relationships": {
                          "type": "object",
                          "properties": {
                            "supporting_service": {
                              "type": "object",
                              "description": "The reference to the service that SUPPORTS the dependent service.",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            },
                            "dependent_service": {
                              "type": "object",
                              "description": "The reference to the service that is DEPENDENT on the supporting service.",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "example": {
                        "relationships": [
                          {
                            "supporting_service": {
                              "id": "P7AD56",
                              "type": "business_service"
                            },
                            "dependent_service": {
                              "id": "P99DJ6",
                              "type": "service"
                            }
                          },
                          {
                            "supporting_service": {
                              "id": "DT93K1",
                              "type": "business_service"
                            },
                            "dependent_service": {
                              "id": "RS34D9",
                              "type": "service"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The services were successfully associated."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/service_dependencies/disassociate": {
      "description": "Disassociate dependencies of services.",
      "post": {
        "tags": [
          "Business Services"
        ],
        "operationId": "deleteServiceDependency",
        "summary": "Disassociate service dependencies",
        "description": "Disassociate dependencies between two services.",
        "parameters": [
          {
            "name": "relationships",
            "in": "query",
            "description": "Multiple relationships of service dependencies to be deleted.",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "supporting_service": {
                          "type": "object",
                          "description": "The reference to the service that SUPPORTS the dependent service.",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          }
                        },
                        "dependent_service": {
                          "type": "object",
                          "description": "The reference to the service that is DEPENDENT on the supporting service.",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "example": {
                    "relationships": [
                      {
                        "supporting_service": {
                          "id": "P7AD56",
                          "type": "business_service"
                        },
                        "dependent_service": {
                          "id": "P99DJ6",
                          "type": "service"
                        }
                      },
                      {
                        "supporting_service": {
                          "id": "DT93K1",
                          "type": "business_service"
                        },
                        "dependent_service": {
                          "id": "RS34D9",
                          "type": "service"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The services were successfully disassociated."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/service_dependencies/business_services/{id}": {
      "description": "Get the dependencies of a given business service.",
      "get": {
        "tags": [
          "Business Services"
        ],
        "operationId": "getBusinessServiceServiceDependencies",
        "summary": "Get business service dependencies",
        "description": "Get all immediate dependencies of any business service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of service relationships.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "relationships": {
                          "type": "object",
                          "properties": {
                            "supporting_service": {
                              "type": "object",
                              "description": "The reference to the service that SUPPORTS the dependent service.",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            },
                            "dependent_service": {
                              "type": "object",
                              "description": "The reference to the service that is DEPENDENT on the supporting service.",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "example": {
                        "relationships": [
                          {
                            "supporting_service": {
                              "id": "P7AD56",
                              "type": "business_service"
                            },
                            "dependent_service": {
                              "id": "P99DJ6",
                              "type": "service"
                            }
                          },
                          {
                            "supporting_service": {
                              "id": "P99DJ6",
                              "type": "service"
                            },
                            "dependent_service": {
                              "id": "RS34D9",
                              "type": "service"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/services": {
      "description": "List and create services.",
      "get": {
        "tags": [
          "Services"
        ],
        "operationId": "listServices",
        "description": "List existing services.",
        "summary": "List services",
        "parameters": [
          {
            "$ref": "#/components/parameters/team_ids"
          },
          {
            "$ref": "#/components/parameters/time_zone"
          },
          {
            "$ref": "#/components/parameters/sort_by_service"
          },
          {
            "name": "query",
            "in": "query",
            "description": "Filters the result, showing only the services whose name or service_key matches the query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "escalation_policies",
                "teams",
                "integrations"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of services.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "services": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Service"
                          }
                        }
                      },
                      "required": [
                        "services"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "services": [
                        {
                          "id": "PIJ90N7",
                          "summary": "My Application Service",
                          "type": "service",
                          "self": "https://api.pagerduty.com/services/PIJ90N7",
                          "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7",
                          "name": "My Application Service",
                          "auto_resolve_timeout": 14400,
                          "acknowledgement_timeout": 600,
                          "created_at": "2015-11-06T16:12:51.000Z",
                          "status": "active",
                          "alert_creation": "create_alerts_and_incidents",
                          "alert_grouping": "intelligent",
                          "integrations": [
                            {
                              "id": "PQ12345",
                              "type": "generic_email_inbound_integration_reference",
                              "summary": "Email Integration",
                              "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                              "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                            }
                          ],
                          "escalation_policy": {
                            "id": "PT20YPA",
                            "type": "escalation_policy_reference",
                            "summary": "Another Escalation Policy",
                            "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                            "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                          },
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ],
                          "incident_urgency_rule": {
                            "type": "use_support_hours",
                            "during_support_hours": {
                              "type": "constant",
                              "urgency": "high"
                            },
                            "outside_support_hours": {
                              "type": "constant",
                              "urgency": "low"
                            }
                          },
                          "support_hours": {
                            "type": "fixed_time_per_day",
                            "time_zone": "America/Lima",
                            "start_time": "09:00:00",
                            "end_time": 61200,
                            "days_of_week": [
                              1,
                              2,
                              3,
                              4,
                              5
                            ]
                          },
                          "scheduled_actions": [
                            {
                              "type": "urgency_change",
                              "at": {
                                "type": "named_time",
                                "name": "support_hours_start"
                              },
                              "to_urgency": "high"
                            }
                          ]
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Services"
        ],
        "operationId": "createService",
        "description": "Create a new service.",
        "summary": "Create a service",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "$ref": "#/components/schemas/ServiceReference"
                  }
                },
                "required": [
                  "service"
                ]
              }
            }
          },
          "description": "The service to be created"
        },
        "responses": {
          "201": {
            "description": "The service that was created",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "service": {
                      "$ref": "#/components/schemas/Service"
                    }
                  },
                  "required": [
                    "service"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "service": {
                        "id": "PIJ90N7",
                        "summary": "My Application Service",
                        "type": "service",
                        "self": "https://api.pagerduty.com/services/PIJ90N7",
                        "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7",
                        "name": "My Application Service",
                        "auto_resolve_timeout": 14400,
                        "acknowledgement_timeout": 600,
                        "created_at": "2015-11-06T16:12:51.000Z",
                        "status": "active",
                        "alert_creation": "create_alerts_and_incidents",
                        "integrations": [
                          {
                            "id": "PQ12345",
                            "type": "generic_email_inbound_integration_reference",
                            "summary": "Email Integration",
                            "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                          }
                        ],
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "incident_urgency_rule": {
                          "type": "use_support_hours",
                          "during_support_hours": {
                            "type": "constant",
                            "urgency": "high"
                          },
                          "outside_support_hours": {
                            "type": "constant",
                            "urgency": "low"
                          }
                        },
                        "support_hours": {
                          "type": "fixed_time_per_day",
                          "time_zone": "America/Lima",
                          "start_time": "09:00:00",
                          "end_time": 61200,
                          "days_of_week": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ]
                        },
                        "scheduled_actions": [
                          {
                            "type": "urgency_change",
                            "at": {
                              "type": "named_time",
                              "name": "support_hours_start"
                            },
                            "to_urgency": "high"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/services/{id}": {
      "description": "Manage a service.",
      "get": {
        "tags": [
          "Services"
        ],
        "operationId": "getService",
        "description": "Get details about an existing service.",
        "summary": "Get a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "escalation_policies",
                "teams"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The service requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "service": {
                      "$ref": "#/components/schemas/Service"
                    }
                  },
                  "required": [
                    "service"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "service": {
                        "id": "PIJ90N7",
                        "type": "service",
                        "summary": "My Application Service",
                        "self": "https://api.pagerduty.com/services/PIJ90N7",
                        "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7",
                        "name": "My Application Service",
                        "auto_resolve_timeout": 14400,
                        "acknowledgement_timeout": 600,
                        "created_at": "2015-11-06T16:12:51.000Z",
                        "status": "active",
                        "alert_creation": "create_alerts_and_incidents",
                        "integrations": [
                          {
                            "id": "PQ12345",
                            "type": "generic_email_inbound_integration_reference",
                            "summary": "Email Integration",
                            "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                          }
                        ],
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "incident_urgency_rule": {
                          "type": "use_support_hours",
                          "during_support_hours": {
                            "type": "constant",
                            "urgency": "high"
                          },
                          "outside_support_hours": {
                            "type": "constant",
                            "urgency": "low"
                          }
                        },
                        "support_hours": {
                          "type": "fixed_time_per_day",
                          "time_zone": "America/Lima",
                          "start_time": "09:00:00",
                          "end_time": 61200,
                          "days_of_week": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ]
                        },
                        "scheduled_actions": [
                          {
                            "type": "urgency_change",
                            "at": {
                              "type": "named_time",
                              "name": "support_hours_start"
                            },
                            "to_urgency": "high"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Services"
        ],
        "operationId": "deleteService",
        "description": "Delete an existing service. Once the service is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this service.",
        "summary": "Delete a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The service was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Services"
        ],
        "description": "Update an existing service.",
        "summary": "Update a service",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "operationId": "updateService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "service": {
                    "$ref": "#/components/schemas/ServiceReference"
                  }
                },
                "required": [
                  "service"
                ]
              }
            }
          },
          "description": "The service to be updated."
        },
        "responses": {
          "200": {
            "description": "The service that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "service": {
                      "$ref": "#/components/schemas/Service"
                    }
                  },
                  "required": [
                    "service"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "service": {
                        "id": "PIJ90N7",
                        "type": "service",
                        "summary": "My Application Service",
                        "self": "https://api.pagerduty.com/services/PIJ90N7",
                        "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7",
                        "name": "My Application Service",
                        "auto_resolve_timeout": 14400,
                        "acknowledgement_timeout": 600,
                        "created_at": "2015-11-06T16:12:51.000Z",
                        "status": "active",
                        "alert_creation": "create_alerts_and_incidents",
                        "alert_grouping": "time",
                        "alert_grouping_timeout": 2,
                        "integrations": [
                          {
                            "id": "PQ12345",
                            "type": "generic_email_inbound_integration_reference",
                            "summary": "Email Integration",
                            "self": "https://api.pagerduty.com/services/PIJ90N7/integrations/PQ12345",
                            "html_url": "https://subdomain.pagerduty.com/services/PIJ90N7/integrations/PQ12345"
                          }
                        ],
                        "escalation_policy": {
                          "id": "PT20YPA",
                          "type": "escalation_policy_reference",
                          "summary": "Another Escalation Policy",
                          "self": "https://api.pagerduty.com/escalation_policies/PT20YPA",
                          "html_url": "https://subdomain.pagerduty.com/escalation_policies/PT20YPA"
                        },
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ],
                        "incident_urgency_rule": {
                          "type": "use_support_hours",
                          "during_support_hours": {
                            "type": "constant",
                            "urgency": "high"
                          },
                          "outside_support_hours": {
                            "type": "constant",
                            "urgency": "low"
                          }
                        },
                        "support_hours": {
                          "type": "fixed_time_per_day",
                          "time_zone": "America/Lima",
                          "start_time": "09:00:00",
                          "end_time": 61200,
                          "days_of_week": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ]
                        },
                        "scheduled_actions": [
                          {
                            "type": "urgency_change",
                            "at": {
                              "type": "named_time",
                              "name": "support_hours_start"
                            },
                            "to_urgency": "high"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/services/{id}/integrations": {
      "description": "Create integrations belonging to a service.",
      "post": {
        "tags": [
          "Services"
        ],
        "operationId": "createServiceIntegration",
        "summary": "Create a new integration",
        "description": "Create a new integration belonging to a service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integration": {
                    "$ref": "#/components/schemas/Integration"
                  }
                },
                "required": [
                  "integration"
                ]
              }
            }
          },
          "description": "The integration to be created"
        },
        "responses": {
          "201": {
            "description": "The integration that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "integration": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  },
                  "required": [
                    "integration"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "integration": {
                        "id": "PE1U9CH",
                        "type": "generic_email_inbound_integration",
                        "summary": "Email",
                        "self": "https://api.pagerduty.com/services/PQL78HM/integrations/PE1U9CH",
                        "html_url": "https://subdomain.pagerduty.com/services/PQL78HM/integrations/PE1U9CH",
                        "name": "Email",
                        "service": {
                          "id": "PQL78HM",
                          "type": "service_reference",
                          "summary": "My Email-Based Integration",
                          "self": "https://api.pagerduty.com/services/PQL78HM",
                          "html_url": "https://subdomain.pagerduty.com/services/PQL78HM"
                        },
                        "created_at": "2015-10-14T20:33:02.000Z",
                        "integration_email": "my-email-based-integration@subdomain.pagerduty.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/services/{id}/integrations/{integration_id}": {
      "description": "View or update integrations belonging to a service.",
      "put": {
        "tags": [
          "Services"
        ],
        "operationId": "updateServiceIntegration",
        "summary": "Update an existing integration",
        "description": "Update an integration belonging to a service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/integration_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integration": {
                    "$ref": "#/components/schemas/Integration"
                  }
                },
                "required": [
                  "integration"
                ]
              }
            }
          },
          "description": "The integration to be updated"
        },
        "responses": {
          "200": {
            "description": "The integration that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "integration": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  },
                  "required": [
                    "integration"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "integration": {
                        "id": "PE1U9CH",
                        "type": "generic_email_inbound_integration",
                        "summary": "Email",
                        "self": "https://api.pagerduty.com/services/PQL78HM/integrations/PE1U9CH",
                        "html_url": "https://subdomain.pagerduty.com/services/PQL78HM/integrations/PE1U9CH",
                        "name": "Email",
                        "service": {
                          "id": "PQL78HM",
                          "type": "service_reference",
                          "summary": "My Email-Based Integration",
                          "self": "https://api.pagerduty.com/services/PQL78HM",
                          "html_url": "https://subdomain.pagerduty.com/services/PQL78HM"
                        },
                        "created_at": "2015-10-14T20:33:02.000Z",
                        "integration_email": "my-email-based-integration@subdomain.pagerduty.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "get": {
        "tags": [
          "Services"
        ],
        "operationId": "getServiceIntegration",
        "summary": "View an integration",
        "description": "Get details about an integration belonging to a service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/integration_id"
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "services",
                "vendors"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The integration that was requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "integration": {
                      "$ref": "#/components/schemas/Integration"
                    }
                  },
                  "required": [
                    "integration"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "integration": {
                        "id": "PE1U9CH",
                        "type": "generic_email_inbound_integration",
                        "summary": "Email",
                        "self": "https://api.pagerduty.com/services/PQL78HM/integrations/PE1U9CH",
                        "html_url": "https://subdomain.pagerduty.com/services/PQL78HM/integrations/PE1U9CH",
                        "name": "Email",
                        "service": {
                          "id": "PQL78HM",
                          "type": "service_reference",
                          "summary": "My Email-Based Integration",
                          "self": "https://api.pagerduty.com/services/PQL78HM",
                          "html_url": "https://subdomain.pagerduty.com/services/PQL78HM"
                        },
                        "created_at": "2015-10-14T20:33:02.000Z",
                        "vendor": {
                          "id": "P8JX75F",
                          "type": "vendor_reference",
                          "summary": "Autotask",
                          "self": "https://api.pagerduty.com/vendors/P8JX75F"
                        },
                        "integration_email": "my-email-based-integration@subdomain.pagerduty.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "listTags",
        "description": "List all of your account's tags.",
        "summary": "List tags",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filters the result, showing only the tags whose labels match the query.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tags names.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Tag"
                          }
                        }
                      },
                      "required": [
                        "tags"
                      ]
                    }
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "tags": {
                        "type": "tag",
                        "summary": "Batman",
                        "self": "https://api.pagerduty.com/tags/P5IYCNZ",
                        "label": "Batman",
                        "id": "P5IYCNZ",
                        "html_url": "null"
                      },
                      "limit": 100,
                      "offset": 0,
                      "total": 1,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "createTags",
        "description": "Create a new tag.",
        "summary": "Create a tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "required": [
                  "tag"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The tag that was created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tag": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  },
                  "required": [
                    "tag"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "tag": {
                        "type": "tag",
                        "summary": "Batman",
                        "self": "https://api.pagerduty.com/tags/P5IYCNZ",
                        "label": "Batman",
                        "id": "P5IYCNZ",
                        "html_url": "null"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "getTag",
        "description": "Get details about an existing tag.",
        "summary": "Get a tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "The tag requested.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tag": {
                      "$ref": "#/components/schemas/Tag"
                    }
                  },
                  "required": [
                    "tag"
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "tag": {
                        "type": "tag",
                        "summary": "Batman",
                        "self": "https://api.pagerduty.com/tags/P5IYCNZ",
                        "label": "Batman",
                        "id": "P5IYCNZ",
                        "html_url": "null"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "deleteTag",
        "description": "Remove an existing tag.",
        "summary": "Delete a tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The tag was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/tags/{id}/{entity_type}": {
      "get": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "getTagsByEntityType",
        "description": "Get related Users, Teams or Escalation Policies for the tag.",
        "summary": "Get connected entities",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/entity_type"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of connected entities.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EntityReference"
                          }
                        },
                        "teams": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EntityReference"
                          }
                        },
                        "escalation_policies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EntityReference"
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "users": [
                        {
                          "id": "PXPGF42",
                          "type": "user_reference"
                        },
                        {
                          "id": "PAM4FGS",
                          "type": "user_reference"
                        }
                      ],
                      "limit": 100,
                      "offset": 0,
                      "total": 2,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/{entity_type}/{id}/tags": {
      "get": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "getEntityTypeByIdTags",
        "description": "Get related tags for Users, Teams or Escalation Policies.",
        "summary": "Get tags for entities",
        "parameters": [
          {
            "$ref": "#/components/parameters/entity_type"
          },
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tags.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tags": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Tag"
                          }
                        }
                      },
                      "required": [
                        "tags"
                      ]
                    }
                  ]
                },
                "examples": {
                  "response": {
                    "value": {
                      "tags": {
                        "type": "tag",
                        "summary": "Batman",
                        "self": "https://api.pagerduty.com/tags/P5IYCNZ",
                        "label": "Batman",
                        "id": "P5IYCNZ",
                        "html_url": "null"
                      },
                      "limit": 100,
                      "offset": 0,
                      "total": 1,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/{entity_type}/{id}/change_tags": {
      "post": {
        "tags": [
          "Contextual Search"
        ],
        "operationId": "createEntityTypeByIdChangeTags",
        "description": "Assign existing or new tags.",
        "summary": "Assign tags",
        "parameters": [
          {
            "$ref": "#/components/parameters/entity_type"
          },
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Tags to add to or remove from the entity.",
                "properties": {
                  "add": {
                    "type": "array",
                    "description": "Array of tags and/or tag references to add to the entity.\nFor elements with type `tag_reference`, the tag with the corresponding `id` is added to the entity.\nFor elements with type `tag`, if there is an existing tag with the given\nlabel that tag is added to the entity. If there is no existing tag with that label and the user has permission\nto create tags, a new tag is created with that label and assigned to the entity.\n",
                    "items": {
                      "title": "Tags to add",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "tag",
                            "tag_reference"
                          ]
                        },
                        "label": {
                          "type": "string",
                          "description": "The label of the tag. Should be used when type is \"tag\".",
                          "maxLength": 191
                        },
                        "id": {
                          "type": "string",
                          "description": "The id of the tag. Should be used when type is \"tag_reference\".",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    "example": [
                      {
                        "type": "tag",
                        "label": "Batman"
                      },
                      {
                        "type": "tag_reference",
                        "id": "P5IYCNZ"
                      }
                    ]
                  },
                  "remove": {
                    "type": "array",
                    "description": "Array of tag references to remove from the entity.",
                    "items": {
                      "title": "Tags to remove.",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "tag_reference"
                          ]
                        },
                        "id": {
                          "type": "string",
                          "description": "The id of the tag",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    },
                    "example": [
                      {
                        "type": "tag_reference",
                        "id": "POE7RY8"
                      },
                      {
                        "type": "tag_reference",
                        "id": "PG68P1M"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The tags were added and/or removed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/teams": {
      "description": "List or create teams.",
      "post": {
        "tags": [
          "Teams"
        ],
        "operationId": "createTeam",
        "description": "Create a new team.",
        "summary": "Create a team",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "team": {
                    "$ref": "#/components/schemas/Team"
                  }
                },
                "required": [
                  "team"
                ]
              }
            }
          },
          "description": "The team to be created."
        },
        "responses": {
          "201": {
            "description": "The team that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "$ref": "#/components/schemas/TeamReference"
                    }
                  },
                  "required": [
                    "team"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "team": {
                        "id": "PQ9K7I8",
                        "type": "team",
                        "summary": "Engineering",
                        "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                        "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8",
                        "name": "Engineering",
                        "description": "All engineering",
                        "base_role": "observer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "get": {
        "tags": [
          "Teams"
        ],
        "operationId": "listTeams",
        "description": "List teams of your PagerDuty account, optionally filtered by a search query.",
        "summary": "List teams",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filters the result, showing only the teams whose names or email addresses match the query.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of teams.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "teams": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Team"
                          }
                        }
                      },
                      "required": [
                        "teams"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "teams": [
                        {
                          "id": "PQ9K7I8",
                          "type": "team",
                          "summary": "Engineering",
                          "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                          "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8",
                          "name": "Engineering",
                          "description": "All engineering"
                        }
                      ],
                      "limit": 100,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/teams/{id}": {
      "description": "Manage a team.",
      "get": {
        "tags": [
          "Teams"
        ],
        "operationId": "getTeam",
        "description": "Get details about an existing team.",
        "summary": "Get a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include_teams"
          }
        ],
        "responses": {
          "200": {
            "description": "The team requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "$ref": "#/components/schemas/Team"
                    }
                  },
                  "required": [
                    "team"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "team": {
                        "id": "PQ9K7I8",
                        "type": "team",
                        "summary": "Engineering",
                        "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                        "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8",
                        "name": "Engineering",
                        "description": "All engineering",
                        "default_role": "observer"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "operationId": "deleteTeam",
        "description": "Remove an existing team. \n\nSucceeds only if the team has no associated Escalation Policies, Services, Schedules and Subteams. \n\nAll associated unresovled incidents will be reassigned to another team (if specified) or will loose team association, thus becoming account-level (with visibility implications). \n\nNote that the incidents reassignment process is asynchronous and has no guarantee to complete before the API call return.\n",
        "summary": "Delete a team",
        "parameters": [
          {
            "name": "reassignment_team",
            "in": "query",
            "description": "Team to reassign unresolved incident to. \nIf an unresolved incident exists on both the reassignment team and \nthe team being deleted, a duplicate will not be made. If not supplied, \nunresolved incidents will be made account-level.\n",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The team was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "operationId": "updateTeam",
        "description": "Update an existing team.",
        "summary": "Update a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "team": {
                    "$ref": "#/components/schemas/TeamReference"
                  }
                },
                "required": [
                  "team"
                ]
              }
            }
          },
          "description": "The team to be updated."
        },
        "responses": {
          "200": {
            "description": "The team that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "$ref": "#/components/schemas/Team"
                    }
                  },
                  "required": [
                    "team"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "team": {
                        "id": "PQ9K7I8",
                        "type": "team",
                        "summary": "Engineering",
                        "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                        "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8",
                        "name": "Engineering",
                        "description": "All engineering",
                        "default_role": "observer"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/teams/{id}/members": {
      "description": "Retrieve information about members within a team.",
      "get": {
        "tags": [
          "Teams"
        ],
        "operationId": "listTeamUsers",
        "description": "Get information about members on a team.",
        "summary": "Get information about members on a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include_teams_members"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of users within the requested team.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "members": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserReference"
                          }
                        }
                      },
                      "required": [
                        "members"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "members": [
                        {
                          "user": [
                            {
                              "id": "P0XJYI9",
                              "type": "user_reference",
                              "summary": "Jane Doe",
                              "self": "https://api.pagerduty.com/users/P0XJYI9",
                              "html_url": "https://subdomain.pagerduty.com/users/P0XJYI9"
                            },
                            {
                              "role": "manager"
                            }
                          ]
                        }
                      ],
                      "limit": 100,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/teams/{id}/users/{user_id}": {
      "description": "Manage team memberships.",
      "delete": {
        "tags": [
          "Teams"
        ],
        "operationId": "deleteTeamUser",
        "description": "Remove a user from a team.",
        "summary": "Remove a user from a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/team_user_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The user was removed to the team."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "operationId": "updateTeamUser",
        "description": "Add a user to a team. Attempting to add a user with the `read_only_user` role will return a 400 error.",
        "summary": "Add a user to a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/team_user_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The role of the user on the team.",
                    "enum": [
                      "observer",
                      "responder",
                      "manager"
                    ]
                  }
                },
                "example": {
                  "role": "observer"
                }
              }
            }
          },
          "description": "The role of the user on the team."
        },
        "responses": {
          "204": {
            "description": "The user was added to the team."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/teams/{id}/escalation_policies/{escalation_policy_id}": {
      "description": "Manage an escalation policy for a team.",
      "delete": {
        "tags": [
          "Teams"
        ],
        "operationId": "deleteTeamEscalationPolicy",
        "description": "Remove an escalation policy from a team.",
        "summary": "Remove an escalation policy from a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/team_escalation_policy_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The escalation policy was removed from the team."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "operationId": "updateTeamEscalationPolicy",
        "description": "Add an escalation policy to a team.",
        "summary": "Add an escalation policy to a team",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/team_escalation_policy_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The escalation policy was added to the team."
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users": {
      "description": "List and create users.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "listUsers",
        "description": "List users of your PagerDuty account, optionally filtered by a search query.",
        "summary": "List users",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Filters the result, showing only the users whose names or email addresses match the query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/team_ids"
          },
          {
            "$ref": "#/components/parameters/include_user"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated array of users.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "users": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/User"
                          }
                        }
                      },
                      "required": [
                        "users"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "users": [
                        {
                          "id": "PXPGF42",
                          "type": "user",
                          "summary": "Earline Greenholt",
                          "self": "https://api.pagerduty.com/users/PXPGF42",
                          "html_url": "https://subdomain.pagerduty.com/users/PXPGF42",
                          "name": "Earline Greenholt",
                          "email": "125.greenholt.earline@graham.name",
                          "time_zone": "America/Lima",
                          "color": "green",
                          "role": "admin",
                          "avatar_url": "https://secure.gravatar.com/avatar/a8b714a39626f2444ee05990b078995f.png?d=mm&r=PG",
                          "description": "I'm the boss",
                          "invitation_sent": false,
                          "contact_methods": [
                            {
                              "id": "PTDVERC",
                              "type": "email_contact_method_reference",
                              "summary": "Default",
                              "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                            }
                          ],
                          "notification_rules": [
                            {
                              "id": "P8GRWKK",
                              "start_delay_in_minutes": 0,
                              "created_at": "2015-12-11T23:38:11.000Z",
                              "contact_method": {
                                "id": "PTDVERC",
                                "type": "email_contact_method_reference",
                                "summary": "Default",
                                "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                              },
                              "urgency": "low",
                              "type": "assignment_notification_rule"
                            }
                          ],
                          "job_title": "Director of Engineering",
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ]
                        },
                        {
                          "id": "PAM4FGS",
                          "type": "user",
                          "summary": "Kyler Kuhn",
                          "self": "https://api.pagerduty.com/users/PAM4FGS",
                          "html_url": "https://subdomain.pagerduty.com/users/PAM4FGS",
                          "name": "Kyler Kuhn",
                          "email": "126_dvm_kyler_kuhn@beahan.name",
                          "time_zone": "Asia/Hong_Kong",
                          "color": "red",
                          "role": "admin",
                          "avatar_url": "https://secure.gravatar.com/avatar/47857d059adacf9a41dc4030c2e14b0a.png?d=mm&r=PG",
                          "description": "Actually, I am the boss",
                          "invitation_sent": false,
                          "contact_methods": [
                            {
                              "id": "PVMGSML",
                              "type": "email_contact_method_reference",
                              "summary": "Work",
                              "self": "https://api.pagerduty.com/users/PAM4FGS/contact_methods/PVMGSMLL"
                            }
                          ],
                          "notification_rules": [
                            {
                              "id": "P6EJ1EE",
                              "start_delay_in_minutes": 0,
                              "created_at": "2015-12-11T23:38:11.000Z",
                              "contact_method": {
                                "id": "PVMGSML",
                                "type": "email_contact_method_reference",
                                "summary": "Work",
                                "self": "https://api.pagerduty.com/users/PAM4FGS/contact_methods/PVMGSMLL"
                              },
                              "urgency": "high",
                              "type": "assignment_notification_rule"
                            }
                          ],
                          "job_title": "Senior Engineer",
                          "teams": [
                            {
                              "id": "PQ9K7I8",
                              "type": "team_reference",
                              "summary": "Engineering",
                              "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                              "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                            }
                          ]
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createUser",
        "description": "Create a new user. Note that you must also supply a `password` property to create a user--it will not be returned by any API.",
        "summary": "Create a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/from_header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/UserReference"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          },
          "description": "The user to be created."
        },
        "responses": {
          "201": {
            "description": "The user that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "user": {
                        "id": "PXPGF42",
                        "type": "user",
                        "summary": "Earline Greenholt",
                        "self": "https://api.pagerduty.com/users/PXPGF42",
                        "html_url": "https://subdomain.pagerduty.com/users/PXPGF42",
                        "name": "Earline Greenholt",
                        "email": "125.greenholt.earline@graham.name",
                        "time_zone": "America/Lima",
                        "color": "green",
                        "role": "admin",
                        "avatar_url": "https://secure.gravatar.com/avatar/a8b714a39626f2444ee05990b078995f.png?d=mm&r=PG",
                        "description": "I'm the boss",
                        "invitation_sent": false,
                        "contact_methods": [
                          {
                            "id": "PTDVERC",
                            "type": "email_contact_method_reference",
                            "summary": "Default",
                            "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                          }
                        ],
                        "notification_rules": [
                          {
                            "id": "P8GRWKK",
                            "start_delay_in_minutes": 0,
                            "created_at": "2015-12-11T23:38:11.000Z",
                            "contact_method": {
                              "id": "PTDVERC",
                              "type": "email_contact_method_reference",
                              "summary": "Default",
                              "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                            },
                            "urgency": "low",
                            "type": "assignment_notification_rule"
                          }
                        ],
                        "job_title": "Director of Engineering",
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}": {
      "description": "Manage a user.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUser",
        "description": "Get details about an existing user.",
        "summary": "Get a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include_user"
          }
        ],
        "responses": {
          "200": {
            "description": "The user requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "user": {
                        "id": "PXPGF42",
                        "type": "user",
                        "summary": "Earline Greenholt",
                        "self": "https://api.pagerduty.com/users/PXPGF42",
                        "html_url": "https://subdomain.pagerduty.com/users/PXPGF42",
                        "name": "Earline Greenholt",
                        "email": "125.greenholt.earline@graham.name",
                        "time_zone": "America/Lima",
                        "color": "green",
                        "role": "admin",
                        "avatar_url": "https://secure.gravatar.com/avatar/a8b714a39626f2444ee05990b078995f.png?d=mm&r=PG",
                        "description": "I'm the boss",
                        "invitation_sent": false,
                        "contact_methods": [
                          {
                            "id": "PTDVERC",
                            "type": "email_contact_method_reference",
                            "summary": "Default",
                            "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                          }
                        ],
                        "notification_rules": [
                          {
                            "id": "P8GRWKK",
                            "start_delay_in_minutes": 0,
                            "created_at": "2015-12-11T23:38:11.000Z",
                            "contact_method": {
                              "id": "PTDVERC",
                              "type": "email_contact_method_reference",
                              "summary": "Default",
                              "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                            },
                            "urgency": "low",
                            "type": "assignment_notification_rule"
                          }
                        ],
                        "job_title": "Director of Engineering",
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUser",
        "description": "Remove an existing user.\n\nReturns 400 if the user has assigned incidents unless your [pricing plan](https://support.pagerduty.com/docs/offboarding) has the `offboarding` feature and the account is [configured](https://support.pagerduty.com/docs/offboarding#section-additional-configurations) appropriately.\n\nNote that the incidents reassignment process is asynchronous and has no guarantee to complete before the api call return.\n\n[*Learn more about `offboarding` feature*](https://support.pagerduty.com/docs/offboarding).\n",
        "summary": "Delete a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The user was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "description": "Update an existing user. Note that you may also supply a `password` property--it will not be returned by any API.",
        "summary": "Update a user",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/UserReference"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          },
          "description": "The user to be updated."
        },
        "responses": {
          "200": {
            "description": "The user that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "user": {
                        "id": "PXPGF42",
                        "type": "user",
                        "summary": "Earline Greenholt",
                        "self": "https://api.pagerduty.com/users/PXPGF42",
                        "html_url": "https://subdomain.pagerduty.com/users/PXPGF42",
                        "name": "Earline Greenholt",
                        "email": "125.greenholt.earline@graham.name",
                        "time_zone": "America/Lima",
                        "color": "green",
                        "role": "admin",
                        "avatar_url": "https://secure.gravatar.com/avatar/a8b714a39626f2444ee05990b078995f.png?d=mm&r=PG",
                        "description": "I'm the boss",
                        "invitation_sent": false,
                        "contact_methods": [
                          {
                            "id": "PTDVERC",
                            "type": "email_contact_method_reference",
                            "summary": "Default",
                            "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                          }
                        ],
                        "notification_rules": [
                          {
                            "id": "P8GRWKK",
                            "start_delay_in_minutes": 0,
                            "created_at": "2015-12-11T23:38:11.000Z",
                            "contact_method": {
                              "id": "PTDVERC",
                              "type": "email_contact_method_reference",
                              "summary": "Default",
                              "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                            },
                            "urgency": "low",
                            "type": "assignment_notification_rule"
                          }
                        ],
                        "job_title": "Director of Engineering",
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/me": {
      "description": "Get the current user.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getCurrentUser",
        "description": "Get details about the current user. This endpoint can only be used with a [user-level API key](https://support.pagerduty.com/docs/using-the-api#section-generating-a-personal-rest-api-key) or a key generated through an OAuth flow. This will not work if the request is made with an account-level access token.",
        "summary": "Get the current user",
        "parameters": [
          {
            "$ref": "#/components/parameters/include_user"
          }
        ],
        "responses": {
          "200": {
            "description": "The requesting user.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  },
                  "required": [
                    "user"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "user": {
                        "id": "PXPGF42",
                        "type": "user",
                        "summary": "Earline Greenholt",
                        "self": "https://api.pagerduty.com/users/PXPGF42",
                        "html_url": "https://subdomain.pagerduty.com/users/PXPGF42",
                        "name": "Earline Greenholt",
                        "email": "125.greenholt.earline@graham.name",
                        "time_zone": "America/Lima",
                        "color": "green",
                        "role": "admin",
                        "avatar_url": "https://secure.gravatar.com/avatar/a8b714a39626f2444ee05990b078995f.png?d=mm&r=PG",
                        "description": "I'm the boss",
                        "invitation_sent": false,
                        "contact_methods": [
                          {
                            "id": "PTDVERC",
                            "type": "email_contact_method_reference",
                            "summary": "Default",
                            "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                          }
                        ],
                        "notification_rules": [
                          {
                            "id": "P8GRWKK",
                            "start_delay_in_minutes": 0,
                            "created_at": "2015-12-11T23:38:11.000Z",
                            "contact_method": {
                              "id": "PTDVERC",
                              "type": "email_contact_method_reference",
                              "summary": "Default",
                              "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PTDVERC"
                            },
                            "urgency": "low",
                            "type": "assignment_notification_rule"
                          }
                        ],
                        "job_title": "Director of Engineering",
                        "teams": [
                          {
                            "id": "PQ9K7I8",
                            "type": "team_reference",
                            "summary": "Engineering",
                            "self": "https://api.pagerduty.com/teams/PQ9K7I8",
                            "html_url": "https://subdomain.pagerduty.com/teams/PQ9K7I8"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}/contact_methods": {
      "description": "List a user's contact methods.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserContactMethods",
        "description": "List contact methods of your PagerDuty user.",
        "summary": "List a user's contact methods",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contact methods.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_methods": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactMethodReference"
                      }
                    }
                  },
                  "required": [
                    "contact_methods"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "contact_methods": [
                        {
                          "id": "PXPGF42",
                          "type": "contact_method",
                          "summary": "Work",
                          "self": "https://api.pagerduty.com/users/PXPGF42/contact_method/PXPGF42",
                          "label": "Work",
                          "address": "grady.haylie.126@hickle.net",
                          "send_short_email": false
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createUserContactMethod",
        "description": "Create a new contact method.",
        "summary": "Create a user contact method",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact_method": {
                    "$ref": "#/components/schemas/ContactMethodReference"
                  }
                },
                "required": [
                  "contact_method"
                ]
              }
            }
          },
          "description": "The contact method to be created."
        },
        "responses": {
          "201": {
            "description": "The contact method that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_method": {
                      "$ref": "#/components/schemas/ContactMethodReference"
                    }
                  },
                  "required": [
                    "contact_method"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "contact_method": {
                        "id": "PXPGF42",
                        "type": "contact_method",
                        "summary": "Work",
                        "self": "https://api.pagerduty.com/users/PXPGF42/contact_method/PXPGF42",
                        "label": "Work",
                        "address": "grady.haylie.126@hickle.net",
                        "send_short_email": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}/contact_methods/{contact_method_id}": {
      "description": "Manage a user's contact method.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserContactMethod",
        "description": "Get details about a user's contact method.",
        "summary": "Get a user's contact method",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/user_contact_method_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's contact method requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_method": {
                      "$ref": "#/components/schemas/ContactMethodReference"
                    }
                  },
                  "required": [
                    "contact_method"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "contact_method": {
                        "id": "PXPGF42",
                        "type": "contact_method",
                        "summary": "Work",
                        "self": "https://api.pagerduty.com/users/PXPGF42/contact_method/PXPGF42",
                        "label": "Work",
                        "address": "grady.haylie.126@hickle.net",
                        "send_short_email": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUserContactMethod",
        "description": "Remove a user's contact method.",
        "summary": "Delete a user's contact method",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/user_contact_method_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The contact method was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUserContactMethod",
        "description": "Update a user's contact method.",
        "summary": "Update a user's contact method",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/user_contact_method_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact_method": {
                    "$ref": "#/components/schemas/ContactMethodReference"
                  }
                },
                "required": [
                  "contact_method"
                ]
              }
            }
          },
          "description": "The user's contact method to be updated."
        },
        "responses": {
          "200": {
            "description": "The user's contact method that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact_method": {
                      "$ref": "#/components/schemas/ContactMethodReference"
                    }
                  },
                  "required": [
                    "contact_method"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "contact_method": {
                        "id": "PXPGF42",
                        "type": "contact_method",
                        "summary": "Work",
                        "self": "https://api.pagerduty.com/users/PXPGF42/contact_method/PXPGF42",
                        "label": "Work",
                        "address": "grady.haylie.126@hickle.net",
                        "send_short_email": false
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}/notification_rules": {
      "description": "List a user's notification rules.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserNotificationRules",
        "description": "List notification rules of your PagerDuty user.",
        "summary": "List a user's notification rules",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "contact_methods"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notification rules.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notification_rules": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/NotificationRule"
                      }
                    }
                  },
                  "required": [
                    "notification_rules"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "notification_rules": [
                        {
                          "id": "PXPGF42",
                          "type": "assignment_notification_rule",
                          "summary": "Work",
                          "self": "https://api.pagerduty.com/users/PXPGF42/notification_rules/PPSCXAN",
                          "start_delay_in_minutes": 0,
                          "contact_method": {
                            "id": "PXPGF42",
                            "type": "contact_method_reference",
                            "summary": "Work",
                            "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PXPGF42"
                          },
                          "created_at": "2016-02-01T21:06:27.000Z",
                          "urgency": "high"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "createUserNotificationRule",
        "description": "Create a new notification rule.",
        "summary": "Create a user notification rule",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notification_rule": {
                    "$ref": "#/components/schemas/NotificationRuleReference"
                  }
                },
                "required": [
                  "notification_rule"
                ]
              }
            }
          },
          "description": "The notification rule to be created."
        },
        "responses": {
          "201": {
            "description": "The notification rule that was created.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notification_rule": {
                      "$ref": "#/components/schemas/NotificationRule"
                    }
                  },
                  "required": [
                    "notification_rule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "notification_rule": {
                        "id": "PXPGF42",
                        "type": "assignment_notification_rule",
                        "summary": "Work",
                        "self": "https://api.pagerduty.com/users/PXPGF42/notification_rules/PPSCXAN",
                        "start_delay_in_minutes": 0,
                        "contact_method": {
                          "id": "PXPGF42",
                          "type": "contact_method_reference",
                          "summary": "Work",
                          "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PXPGF42"
                        },
                        "created_at": "2016-02-01T21:06:27.000Z",
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}/notification_rules/{notification_rule_id}": {
      "description": "Manage a user's notification rule.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserNotificationRule",
        "description": "Get details about a user's notification rule.",
        "summary": "Get a user's notification rule",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/user_notification_rule_id"
          },
          {
            "name": "include[]",
            "in": "query",
            "description": "Array of additional details to include.",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "enum": [
                "contact_methods"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user's notification rule requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notification_rule": {
                      "$ref": "#/components/schemas/NotificationRule"
                    }
                  },
                  "required": [
                    "notification_rule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "notification_rule": {
                        "id": "PXPGF42",
                        "type": "assignment_notification_rule",
                        "summary": "Work",
                        "self": "https://api.pagerduty.com/users/PXPGF42/notification_rules/PPSCXAN",
                        "start_delay_in_minutes": 0,
                        "contact_method": {
                          "id": "PXPGF42",
                          "type": "contact_method_reference",
                          "summary": "Work",
                          "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PXPGF42"
                        },
                        "created_at": "2016-02-01T21:06:27.000Z",
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUserNotificationRule",
        "description": "Remove a user's notification rule.",
        "summary": "Delete a user's notification rule",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/user_notification_rule_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The notification rule was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUserNotificationRule",
        "description": "Update a user's notification rule.",
        "summary": "Update a user's notification rule",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/user_notification_rule_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "notification_rule": {
                    "$ref": "#/components/schemas/NotificationRuleReference"
                  }
                },
                "required": [
                  "notification_rule"
                ]
              }
            }
          },
          "description": "The user's notification rule to be updated."
        },
        "responses": {
          "200": {
            "description": "The user's notification rule that was updated.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notification_rule": {
                      "$ref": "#/components/schemas/NotificationRule"
                    }
                  },
                  "required": [
                    "notification_rule"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "notification_rule": {
                        "id": "PXPGF42",
                        "type": "assignment_notification_rule",
                        "summary": "Work",
                        "self": "https://api.pagerduty.com/users/PXPGF42/notification_rules/PPSCXAN",
                        "start_delay_in_minutes": 0,
                        "contact_method": {
                          "id": "PXPGF42",
                          "type": "contact_method_reference",
                          "summary": "Work",
                          "self": "https://api.pagerduty.com/users/PXPGF42/contact_methods/PXPGF42"
                        },
                        "created_at": "2016-02-01T21:06:27.000Z",
                        "urgency": "high"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}/sessions": {
      "description": "List a user's active sessions.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserSessions",
        "description": "List active sessions of a PagerDuty user.",
        "summary": "List a user's active sessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the user's active sessions.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_sessions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserSession"
                      }
                    }
                  },
                  "required": [
                    "user_sessions"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "user_sessions": [
                        {
                          "id": "PXPGF42",
                          "user_id": "PXPGF42",
                          "created_at": "2018-10-06T21:30:42.000Z",
                          "summary": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36",
                          "type": "browser"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUserSessions",
        "description": "Delete all user sessions.",
        "summary": "Delete all user sessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "The user sessions were all deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/users/{id}/sessions/{type}/{session_id}": {
      "description": "Manage a user's active session.",
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUserSession",
        "description": "Get details about a user's session.",
        "summary": "Get a user's session",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/session_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's session requested.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_session": {
                      "$ref": "#/components/schemas/UserSession"
                    }
                  },
                  "required": [
                    "user_session"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "user_session": {
                        "id": "PXPGF42",
                        "user_id": "PXPGF42",
                        "created_at": "2018-10-06T21:30:42.000Z",
                        "summary": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36",
                        "type": "browser"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "operationId": "deleteUserSession",
        "description": "Delete a user's session.",
        "summary": "Delete a user's session",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/session_id"
          }
        ],
        "responses": {
          "204": {
            "description": "The user session was deleted successfully."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/vendors": {
      "description": "List vendors.",
      "get": {
        "tags": [
          "Vendors"
        ],
        "operationId": "listVendors",
        "description": "List all vendors.",
        "summary": "List vendors",
        "responses": {
          "200": {
            "description": "A paginated array of vendors.",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "vendors": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Vendor"
                          }
                        }
                      },
                      "required": [
                        "vendors"
                      ]
                    }
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "vendors": [
                        {
                          "id": "PZQ6AUS",
                          "type": "vendor",
                          "summary": "Amazon CloudWatch",
                          "self": "https://api.pagerduty.com/vendors/PZQ6AUS",
                          "name": "Amazon CloudWatch",
                          "website_url": "https://aws.amazon.com/cloudwatch",
                          "logo_url": "https://s3.amazonaws.com/pdpartner/cloudwatch_large.png",
                          "thumbnail_url": "https://s3.amazonaws.com/pdpartner/cloudwatch_thumb.png",
                          "description": "Amazon Web Services CloudWatch provides monitoring for AWS cloud resources and customer-run applications. AWS can collect data, gain insight, and alert users to fix problems within applications and organizations. AWS CloudWatch gives system-wide visibility into resource utilization and notifications can be set for when any metrics cross a specified threshold.",
                          "integration_guide_url": "http://www.pagerduty.com/docs/guides/aws-cloudwatch-integration-guide/"
                        }
                      ],
                      "limit": 25,
                      "offset": 0,
                      "more": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/vendors/{id}": {
      "description": "Get details about one specific vendor.",
      "get": {
        "tags": [
          "Vendors"
        ],
        "operationId": "getVendor",
        "description": "Get details about one specific vendor.",
        "summary": "Get a vendor",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "The vendor requested",
            "content": {
              "application/vnd.pagerduty+json;version=2": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vendor": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Vendor"
                      }
                    }
                  },
                  "required": [
                    "vendor"
                  ]
                }
              },
              "application/json": {
                "examples": {
                  "response": {
                    "value": {
                      "vendor": {
                        "id": "PZQ6AUS",
                        "type": "vendor",
                        "summary": "Amazon CloudWatch",
                        "self": "https://api.pagerduty.com/vendors/PZQ6AUS",
                        "name": "Amazon CloudWatch",
                        "website_url": "https://aws.amazon.com/cloudwatch",
                        "logo_url": "https://s3.amazonaws.com/pdpartner/cloudwatch_large.png",
                        "thumbnail_url": "https://s3.amazonaws.com/pdpartner/cloudwatch_thumb.png",
                        "description": "Amazon Web Services CloudWatch provides monitoring for AWS cloud resources and customer-run applications. AWS can collect data, gain insight, and alert users to fix problems within applications and organizations. AWS CloudWatch gives system-wide visibility into resource utilization and notifications can be set for when any metrics cross a specified threshold.",
                        "integration_guide_url": "http://www.pagerduty.com/docs/guides/aws-cloudwatch-integration-guide/"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ArgumentError"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    }
  }
}